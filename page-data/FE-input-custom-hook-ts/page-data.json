{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/FE-input-custom-hook-ts/",
    "result": {"data":{"cur":{"id":"e0bdf019-16fc-5372-b49e-2db69640ff06","html":"<p>react로 이것저것 할때마다 가장 귀찮은 것 중 하나가 input을 다루는 일이였다. 회원가입페이지 등을 구성하면서, input을 객체로 갖고 관리하지만 중복되는 코드가 매우 많아 귀찮다. 그래서 customHook을 만들어보았는데, 케이스에 맞게 적용할 수 있을 것 같아 업로드한다.</p>\n<p>우선, 해당 hook에서 대응가능한 event는 다음과 같다.</p>\n<ul>\n<li>Text Input event</li>\n<li>Select event : mui를 이용하여 프론트를 구성하였기에 해당 이벤트를 처리하였음</li>\n<li>check event</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SelectChangeEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@mui/material'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ChangeEvent<span class=\"token punctuation\">,</span> Dispatch<span class=\"token punctuation\">,</span> SetStateAction<span class=\"token punctuation\">,</span> useCallback<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SetState<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Dispatch<span class=\"token operator\">&lt;</span>SetStateAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useInputObjectCallback</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  initialState<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  SetState<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>\n    e<span class=\"token operator\">:</span> ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement <span class=\"token operator\">|</span> HTMLTextAreaElement<span class=\"token operator\">></span> <span class=\"token operator\">|</span> SelectChangeEvent<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    inputType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> onChangeInput <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>\n      e<span class=\"token operator\">:</span> ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement <span class=\"token operator\">|</span> HTMLTextAreaElement<span class=\"token operator\">></span> <span class=\"token operator\">|</span> SelectChangeEvent<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      inputType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> checked <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target <span class=\"token keyword\">as</span> HTMLInputElement<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>prevObj<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>inputType<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'checkbox'</span> <span class=\"token operator\">?</span> checked <span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">,</span> onChangeInput<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> useInputObjectCallback <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>사용법은 다음과 같다.</p>\n<p>우선, 인풋 객체와 초기화 객체를 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//model.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">SignupInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  passwordConfirm<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  first_name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  last_name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  phone_number<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  address<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> SignupInit<span class=\"token operator\">:</span> SignupInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  passwordConfirm<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  first_name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  last_name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  phone_number<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  address<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>react input component에 사용할 때,</p>\n<ul>\n<li>custom hook을 호출하여 state, setState function, onChangeFunction을 할당받는다</li>\n<li>input 태그에 value는 <code class=\"language-text\">state.field_name</code>, onChange는 <code class=\"language-text\">(e)=>onChangeFunction(e, 'field_name')</code>으로 적어준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">&lt;input\n\tplaceholder=&quot;아이디&quot;\n\tvalue={signupObj.username}\n\tonChange={(e) =&gt; onChangeSignupInput(e, &#39;username&#39;)}\n/&gt;\n\n&lt;OutlinedInput\n  placeholder=&quot;주소&quot;\n  value={signupObj.address}\n  onChange={(e) =&gt; onChangeSignupInput(e, &#39;address&#39;)}\n/&gt;</code></pre></div>\n<p>내가 주로 사용하는 mui에서도 편하게 사용이 가능하므로 input과 관련된 별도의 처리를 해주지 않아도 된다. 물론 validation을 해야한다면 onChange가 아닌 setState를 사용하면 될 것이다.</p>\n<p>필드네임을 문자열로 관리하는 것이 좋은 방법은 아니지만, 이렇게 하면 코드를 줄일 수 있다고 생각한다~!</p>","excerpt":"react로 이것저것 할때마다 가장 귀찮은 것 중 하나가 input을 다루는 일이였다. 회원가입페이지 등을 구성하면서, input을 객체로 갖고 관리하지만 중복되는 코드가 매우 많아 귀찮다. 그래서 customHook을 만들어보았는데, 케이스에 맞게 적용할 수 있을 것 같아 업로드한다. 우선, 해당 hook에서 대응가능한 event는 다음과 같다. Text Input event Select event : mui를 이용하여 프론트를 구성하였기에 해당 이벤트를 처리하였음 check event 사용법은 다음과 같다. 우선, 인풋 객체와 초기화 객체를 만들어준다. react input component에 사용할 때, custom hook을 호출하여 state, setState function, onChangeFunction을 할당받는다 input 태그에 value는 , onChange는 으로 적어준다. 내가 주로 사용하는 mui에서도 편하게 사용이 가능하므로 input과 관련된 별도의 처…","frontmatter":{"date":"April 23, 2022","title":"(React TS) 다양한 input을 다룰 수 있는 custom hook","categories":"FE","author":"choieastsea","emoji":"🙄"},"fields":{"slug":"/FE-input-custom-hook-ts/"}},"next":{"id":"547ad7ca-81ab-59f0-8b59-28fabce02cf6","html":"<p>이전까지 장고와 리액트 서버를 연결해보았고, 이때 생길 수 있는 문제인 CORS 정책을 해결하는 것까지 알아보았다. 오늘은 간단하게 장고에서 지원하는 사용자 모델에 대하여 알아보고, 회원가입과 로그인/로그아웃 등의 기능을 구현해보자.</p>\n<h2 id=\"장고에서-제공하는-user-model\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-user-model\" aria-label=\"장고에서 제공하는 user model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고에서 제공하는 User Model</h2>\n<p>장고에서는 사용자와 관련한 많은 기능들이 포함된 User Model class가 기본적으로 제공된다. <a href=\"https://docs.djangoproject.com/en/4.2/ref/contrib/auth/\">공식문서</a></p>\n<p>settings.py에서 User관련한 것들을 추가하지 않고 migration을 진행하였다면 DB에 auth_~로 시작하는 테이블이 만들어져있을 것이다. 하지만, 여기서 제공하는 user의 필드는 id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined 정도이다. 로그인은 username과 password를 기반으로 이루어지며, is_active한 사용자만 authentication이 가능할 것이다.</p>\n<p>만약, 기본적인 user model를 커스텀하고 싶다면 어떻게 해야할까? 크게 몇가지 방법이 있다고 하지만, 마이그레이션까지 완료한 우리의 상태에서는 가장 간단한 1:1 model을 만드는 방법으로 사용자 모델을 확장시켜보도록 하자.</p>\n<h3 id=\"1--1-model을-이용한-user-model-확장\" style=\"position:relative;\"><a href=\"#1--1-model%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-user-model-%ED%99%95%EC%9E%A5\" aria-label=\"1  1 model을 이용한 user model 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 : 1 model을 이용한 user model 확장</h3>\n<p>회원과 관련된 새로운 app을 만들어서 관리하도록 하자.</p>\n<p><code class=\"language-text\">python manage.py startapp myuser</code> 로 새로운 앱을 만들어주었다. settings.py의 INSTALLED_APPS에도 <code class=\"language-text\">myuser</code>를 추가해주었다.</p>\n<p>myuser/model.py에서 다음과 같이 작성하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\n<span class=\"token comment\"># Create your models here.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Profile</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># OneToOne Field로 django의 User model과 연결</span>\n    user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>OneToOneField<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># additional fields</span>\n    phone_number <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    address <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>username</code></pre></div>\n<p><code class=\"language-text\">python manage.py makemigrations myuser</code> 와 <code class=\"language-text\">python manage.py migrate myuser</code> 명령어로 마이그레이션을 적용해준다.</p>\n<p>이제, 로그인과 회원가입을 처리해주자!</p>\n<h3 id=\"로그인과-회원가입\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8%EA%B3%BC-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85\" aria-label=\"로그인과 회원가입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인과 회원가입</h3>\n<p>우리는 django의 user model을 사용하므로, user class에서 제공하는 함수(로그인, 로그아웃, 회원가입 등) 역시 모두 사용할 수 있다.</p>\n<h3 id=\"csrf-\" style=\"position:relative;\"><a href=\"#csrf-\" aria-label=\"csrf  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSRF ?</h3>","frontmatter":{"date":"April 23, 2022","title":"(Django) 장고 api 서버를 이용한 프로젝트 [8-django user model (1 to 1)]","categories":"BE","author":"choieastsea","emoji":"🙄"},"fields":{"slug":"/Django(8)-User Model/"}},"prev":{"id":"e1e5d260-58e0-58af-a974-6c589aef1c8d","html":"<p>Dijkstra(다익스트라) Algorithm은 그래프에서, <strong>한 노드에서 출발하여 다른 노드로 가는 최단 거리</strong>를 구할 때 사용할 수 있는 알고리즘이다. 더 나아가, 출발해서 도착할 때까지의 최단 경로를 구할 수도 있다.</p>\n<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>input : 첫줄에는 노드갯수와 엣지갯수, 두번째줄부터 엣지 정보(노드 번호 두개와 edge weight)</p>\n<p>output : 1번노드에서 n번노드까지의 최단 거리</p>\n<p>​\t(입력 예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5 6\n1 2 2\n2 5 5\n2 3 4\n1 4 1\n4 3 3\n3 5 1\n</code></pre></div>\n<h1 id=\"그래프를-표현하는-방법\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"그래프를 표현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프를 표현하는 방법</h1>\n<p>weighted graph를 표현하는 방법은 크게 두가지로 나눠볼 수 있는데,</p>\n<ol>\n<li>\n<p>노드~노드간의 관계이므로, 노드가 n개일때 n*n matrix를 만들고, cell에 weight를 적는다.</p>\n<p>4번 노드와 3번 노드를 잇는 엣지의 길이가 5이면, <code class=\"language-text\">matrix[4][3]=5</code>와 같이 표현하면 된다. 다만, 이는 두 노드를 잇는 여러 엣지가 존재할 때 구조의 변경이 불가피하다.</p>\n</li>\n<li>\n<p>한 노드에 인접한 노드에 대하여 (weight, 노드번호)를 모든 노드마다 갖도록 한다. (노드번호, weight)로 저장해도 헷갈리지만 않으면 좋다!</p>\n<p>위와 같은 상황일때, <code class=\"language-text\">node_4의 인접노드 : (5, 3번)</code>와 같이 표현할 수 있다.</p>\n</li>\n</ol>\n<p>2의 방법이 공간적으로 효율적이고 여러 엣지가 존재할 경우도 활용이 가능하다. <code class=\"language-text\">c++</code>에서는 pair와 vector배열을 이용하여 입력에 대하여 인접노드를 추가하는 형태로 표현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nvector&lt;pair&lt;int, int&gt;&gt; E[100005];\nint main(void)\n{\n    int n, m; // number of nodes, number of edges\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; m; i++)\n    {\n        int from, to, weight;\n        cin &gt;&gt; from &gt;&gt; to &gt;&gt; weight;\n        E[from].push_back(make_pair(to, weight));\n        E[to].push_back(make_pair(from, weight));\n    }\n   ...\n}</code></pre></div>\n<p>전역변수 E에 모든 엣지의 정보가 저장되어 있으므로, 이를 탐색하며 최단거리를 구할 수 있다.</p>\n<h1 id=\"dijkstra-의사-코드\" style=\"position:relative;\"><a href=\"#dijkstra-%EC%9D%98%EC%82%AC-%EC%BD%94%EB%93%9C\" aria-label=\"dijkstra 의사 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dijkstra 의사 코드</h1>\n<p>위와 같이 그래프를 만들고 나서는 다익스트라 알고리즘을 이용하여 그래프를 탐색하며 최단거리를 구할 수 있다.</p>\n<p>(1번노드에서 출발하여 n번노드까지의 최단거리를 구하는 다익스트라 알고리즘이라고 가정해보자) 우선 출발지부터 i번 노드까지의 최단거리를 기록하는 <code class=\"language-text\">D[i]</code>가 필요하다. D 배열의 각 원소는 처음에 매우 큰 값으로 세팅하도록 하고, 이후 탐색하면서 더 작은 비용의 거리가 발견된다면 업데이트 되도록 하므로, 큰 값으로 초기화를 해준다.</p>\n<ul>\n<li>\n<p>1번노드~1번노드의 거리는 0이므로, 이를 priority queue(이하 pq, 방문할 노드를 엣지의 거리 순으로 저장함)에 저장한다. D[시작노드] = 0 임을 확정짓는다.</p>\n<ul>\n<li>pq가 비어있을때 까지</li>\n</ul>\n<ol>\n<li>\n<p>pq에서 가장 거리가 짧은 엣지를 찾는다. 노드 번호 : <code class=\"language-text\">curNode</code>, 엣지 길이 : <code class=\"language-text\">curDist</code></p>\n</li>\n<li>\n<p>pq에서 해당 엣지(ex. x번 노드까지의 거리)을 제거한다. (방문 처리)</p>\n</li>\n<li>\n<p>만약 <code class=\"language-text\">D[curNode]</code>가 <code class=\"language-text\">curDist</code>보다 작지 않은경우, (D[ ] 업데이트 필요)</p>\n<ol>\n<li>\n<p>curNode의 인접한 노드들을 조사하는데…</p>\n</li>\n<li>\n<p><code class=\"language-text\">D[x]</code>와 <code class=\"language-text\">D[curNode]+curNode~x의 거리</code>를 비교하여 더 작은 값으로 X 노드까지의 최단거리를 업데이트한다.</p>\n</li>\n<li>\n<p>업데이트 되는 경우에는 해당 엣지 정보를 pq에 추가한다.</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p>주의해야할 점은 크게 두가지가 있다.</p>\n<ul>\n<li>인접한 엣지 중에서 가장 weight가 짧은 것을 추출하는 과정에서, 일반 배열로 저장하는 것(<code class=\"language-text\">O(N)</code>)보다는 PQ로 저장하는 것(<code class=\"language-text\">O(log(N))</code>)이 효율적이다.</li>\n<li>A에서 C까지의 최단경로를 볼 때, 임의의 노드 B에서 A<del>B + B</del>C까지의 거리와 A~C의 거리를 비교하고, 더 짧은 것으로 거리를 확정짓는 것이 다익스트라의 핵심이다.</li>\n</ul>\n<p>코드는 아래와 같다. 만약 endNode가 추가적으로 필요하다면, 인자에 추가하고 endNode탐색시 종료하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">void dijkstra(int startNode)\n{\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; pq; // (weight, nodeNo)\n    // startNode PQ에 추가\n\n    pq.push(make_pair(0, startNode));\n    d[startNode] = 0;\n    while (!pq.empty())\n    {\n        int curNode = pq.top().second;\n        int curDist = pq.top().first;\n        // printf(&quot;curNode : %d, curDist : %lld\\n&quot;, curNode, curDist);\n        //해당 노드 방문 처리\n        pq.pop();\n        if (d[curNode] &gt;= curDist)\n        {\n            for (int i = 0; i &lt; E[curNode].size(); i++)\n            {\n                //최단 거리 노드의 인접노드\n                int nextNode = E[curNode][i].second;\n                int nextDist = E[curNode][i].first;\n                // printf(&quot;nextDist : %lld, nextNode: %d\\n&quot;, nextDist, nextNode);\n                if (d[curNode] + nextDist &lt; d[nextNode])\n                {\n                    // printf(&quot;update needed\\n&quot;);\n                    // update 필요\n                    d[nextNode] = d[curNode] + nextDist;\n                    // pq push\n                    pq.push(make_pair(nextDist, nextNode));\n                }\n            }\n        }\n    }\n}</code></pre></div>\n<h2 id=\"다익스트라에서-경로를-표현하는-방법\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC%EC%97%90%EC%84%9C-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"다익스트라에서 경로를 표현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다익스트라에서 경로를 표현하는 방법</h2>\n<p>위의 코드는 단지 x번 노드부터 n번 노드까지의 최단거리를 의미한다. 따라서, 어떠한 경로를 통하여 갔는지는 추가적인 작업이 필요하다. 이는 최단거리가 업데이트되어 확정되는 순간에 <strong>해당 노드를 방문하기 직전의 노드를 기록하면 된다</strong>! nextNode와 curNode를 통하여 최단거리를 비교하는 과정에서, 업데이트가 일어나면(최단거리 확정이 일어나면) 배열에다가 curNode를 저장하면 될 것이다.</p>\n<p>그렇게 하면 1 -> 4 -> 3 -> 5의 경로로 최단경로가 확정될 때, [0, 1, 0, 5, 0, 3]와 같이 저장될 것이다. 이를 스택에다가 넣어서 출력하면 깔끔하게 나올 것이다. 최종 코드는 다음과 같다. <code class=\"language-text\">codeforces 20C</code>문제에 대한 코드이다.! 결국 다익스트라가 이러한 틀로 구성되니까 참고하면 좋을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nvector&lt;pair&lt;int, int&gt;&gt; E[100005];\nlong long d[100005];\nint prevNode[100005]; // 최단경로에서 i번째 노드의 이전 노드를 저장\n\nvoid dijkstra(int startNode, int endNode)\n{\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; pq; // (weight, nodeNo)\n    // startNode PQ에 추가\n\n    pq.push(make_pair(0, startNode));\n    d[startNode] = 0;\n    prevNode[startNode] = startNode;\n    while (!pq.empty())\n    {\n        int curNode = pq.top().second;\n        int curDist = pq.top().first;\n        // printf(&quot;curNode : %d, curDist : %lld\\n&quot;, curNode, curDist);\n        //해당 노드 방문 처리\n        pq.pop();\n        if (d[curNode] &gt;= curDist)\n        {\n            for (int i = 0; i &lt; E[curNode].size(); i++)\n            {\n                //최단 거리 노드의 인접노드\n                int nextNode = E[curNode][i].second;\n                int nextDist = E[curNode][i].first;\n                // printf(&quot;nextDist : %lld, nextNode: %d\\n&quot;, nextDist, nextNode);\n                if (d[curNode] + nextDist &lt; d[nextNode])\n                {\n                    // printf(&quot;update needed\\n&quot;);\n                    // update 필요\n                    d[nextNode] = d[curNode] + nextDist;\n                    // for path\n                    prevNode[nextNode] = curNode;\n                    // pq push\n                    pq.push(make_pair(nextDist, nextNode));\n                }\n            }\n        }\n    }\n}\n\nint main(void)\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    int n, m, from, to, weight; // n : number of nodes, m : number of edges\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; m; i++)\n    {\n        cin &gt;&gt; from &gt;&gt; to &gt;&gt; weight; // 1-based-node\n        E[from].push_back(make_pair(weight, to));\n        E[to].push_back(make_pair(weight, from));\n        // printf(&quot;from : %d, to : %d, weight : %lld\\n&quot;, from, to, weight);\n    }\n    for (int i = 1; i &lt;= n; i++)\n    {\n        d[i] = LLONG_MAX;\n    }\n    dijkstra(1, n);\n    if (d[n] == LLONG_MAX)\n    {\n        // update되지 않았다 -&gt; 경로 없다\n        printf(&quot;-1\\n&quot;);\n        return 0;\n    }\n    int c = n;\n    stack&lt;int&gt; path;\n    while (c != 1)\n    {\n        // printf(&quot;%d &quot;, c);\n        path.push(c);\n        c = prevNode[c];\n    }\n    path.push(c);\n    while (!path.empty())\n    {\n        printf(&quot;%d &quot;, path.top());\n        path.pop();\n    }\n    printf(&quot;\\n&quot;);\n    return 0;\n}</code></pre></div>","frontmatter":{"date":"May 28, 2022","title":"(Alg) 그래프 알고리즘 - Dijkstra와 최단 경로 출력","categories":"Alg","author":"choieastsea","emoji":"😬"},"fields":{"slug":"/Alg-Dijkstra/"}},"site":{"siteMetadata":{"siteUrl":"https://choieastsea.github.io","comments":{"utterances":{"repo":"choieastsea/choieastsea.github.io"}}}}},"pageContext":{"slug":"/FE-input-custom-hook-ts/","nextSlug":"/Django(8)-User Model/","prevSlug":"/Alg-Dijkstra/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}