{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Alg-LC-94/",
    "result": {"data":{"cur":{"id":"98e25779-a901-5a68-a9ee-b8bf1f851a34","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>트리에서 <code class=\"language-text\">inorder traverse</code>를 수행한 리스트를 리턴하는 문제이다. <a href=\"https://leetcode.com/problems/binary-tree-inorder-traversal/\">링크</a></p>\n<p><a href=\"https://choieastsea.github.io/Alg-LC-230/\">230번 문제</a>의 기반이 된다고 볼 수 있는 inorder 순회는 <code class=\"language-text\">[트리의 왼쪽 서브트리 탐색] - [노드 탐색] - [트리의 오른쪽 서브트리 탐색]</code> 이 재귀적으로 이루어지는 순회이다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>sol1) 직관적으로 tree의 순회 문제들은 재귀적으로 구현해볼 수 있다.</p>\n<p>sol2) 반복문으로 inorder search를 구현할 수 있다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n)</p>\n<p>탐색의 경우 트리의 모든 노드를 탐색하는 것이므로 트리 사이즈에 비례한 시간이 걸린다.</p>\n</li>\n<li>\n<p>Space complexity: O(n)</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># left subtree - root - right subtree</span>\n        visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                inorder<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            visit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                inorder<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> root <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            inorder<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> visit</code></pre></div>\n<p>inorderTraversal 함수는 List를 반환하므로, 내부에 <code class=\"language-text\">inorder</code> 재귀함수를 만들어서 중위순회를 진행하였다. 방문할 때에는 visit 리스트에 추가하도록 구현하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># traverse left subtree - root - right subtree</span>\n        <span class=\"token comment\"># 왼쪽에서부터 사선을 긋는다고 생각 -> 오른쪽 자식 있다면 스택에 넣는다</span>\n        visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        current <span class=\"token operator\">=</span> root\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">elif</span> stack<span class=\"token punctuation\">:</span>\n                current <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># visit current</span>\n                visit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        \n        <span class=\"token keyword\">return</span> visit</code></pre></div>\n<p>두번째 방법은 while 문과 stack을 이용하여 구현하였다.</p>\n<p>이진트리가 주어졌을 때, <strong>왼쪽 아래 사선 방향으로 가면서 오른쪽 아래로 갈 수 있다면 가도록</strong> 반복문을 작성하는 것이 핵심이다. 이를 위하여 stack을 두고, stack에 왼쪽을 넣어가면서 더 이상 왼쪽이 없다면 pop해가면서 오른쪽을 넣고, 오른쪽이 없다면 다시 pop하면서 위의 노드를 보도록 한다.</p>","excerpt":"Intuition 트리에서 를 수행한 리스트를 리턴하는 문제이다. 링크 230번 문제의 기반이 된다고 볼 수 있는 inorder 순회는  이 재귀적으로 이루어지는 순회이다. Approach sol1) 직관적으로 tree의 순회 문제들은 재귀적으로 구현해볼 수 있다. sol2) 반복문으로 inorder search를 구현할 수 있다. Complexity Time complexity: O(n) 탐색의 경우 트리의 모든 노드를 탐색하는 것이므로 트리 사이즈에 비례한 시간이 걸린다. Space complexity: O(n) Code inorderTraversal 함수는 List를 반환하므로, 내부에  재귀함수를 만들어서 중위순회를 진행하였다. 방문할 때에는 visit 리스트에 추가하도록 구현하였다. 두번째 방법은 while 문과 stack을 이용하여 구현하였다. 이진트리가 주어졌을 때, 왼쪽 아래 사선 방향으로 가면서 오른쪽 아래로 갈 수 있다면 가도록 반복문을 작성하는 것이 핵심이다. …","frontmatter":{"date":"September 21, 2023","title":"(Alg) LeetCode Top Interview 150 - 94. Binary Tree Inorder Traversal","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-94/"}},"next":{"id":"1a10fb82-bb73-5a84-a9e0-959856b67ec6","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p><code class=\"language-text\">NestedInteger</code> 자료형이 주어지고 NestedInteger의 List가 들어올 때, 이를 1차원 vector로 flatten한 배열을 만들어주는 <code class=\"language-text\">NestedIterator</code> 클래스를 구현하는 문제이다. <a href=\"https://leetcode.com/problems/flatten-nested-list-iterator/\">링크</a></p>\n<p>NestedInteger 는 아래와 인터페이스만 제공된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NestedInteger</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n       <span class=\"token triple-quoted-string string\">\"\"\"\n       @return True if this NestedInteger holds a single integer, rather than a nested list.\n       \"\"\"</span>\n\n   <span class=\"token keyword\">def</span> <span class=\"token function\">getInteger</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n       <span class=\"token triple-quoted-string string\">\"\"\"\n       @return the single integer that this NestedInteger holds, if it holds a single integer\n       Return None if this NestedInteger holds a nested list\n       \"\"\"</span>\n\n   <span class=\"token keyword\">def</span> <span class=\"token function\">getList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>NestedInteger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n       <span class=\"token triple-quoted-string string\">\"\"\"\n       @return the nested list that this NestedInteger holds, if it holds a nested list\n       Return None if this NestedInteger holds a single integer\n       \"\"\"</span></code></pre></div>\n<p>구현해야할 NestedIterator의 함수는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NestedIterator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nestedList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>NestedInteger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n       \n    <span class=\"token keyword\">def</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        \n\n<span class=\"token comment\"># Your NestedIterator object will be instantiated and called as such:</span>\n<span class=\"token comment\"># i, v = NestedIterator(nestedList), []</span>\n<span class=\"token comment\"># while i.hasNext(): v.append(i.next())      </span></code></pre></div>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>init 함수에서 nestedList를 이용하여 <code class=\"language-text\">flattenList</code>를 만들어주고, next index를 가리키는 <code class=\"language-text\">pointer</code>를 구현하는 방법으로 생각해보았다. 그러면 next에서는 pointer의 값을 리턴하고, hasNext는 pointer의 범위를 확인하면 될 것이다.</p>\n<p>flattenList를 만들어주는 과정은 <code class=\"language-text\">DFS</code>를 이용하였다. <code class=\"language-text\">[[1,2,3],[4,[5],6,[7,8],9],[10]]</code>이 들어온다면 <code class=\"language-text\">[1,2,3,4,5,6,7,8,9,10] </code>으로 만들어줘야 하므로 배열인 경우에는 더 깊이 들어가고, 숫자인 경우에는 flattenList에 추가해주면 된다.</p>\n<p>주의할 점으로는 stack을 이용한 DFS의 경우, 역순으로 탐색하게 되므로 reverse를 해주어 스택에 넣어주면 될 것이다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>Time complexity : O(n)</li>\n<li>Space complexity: O(n)</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<p>첫번째 방법의 코드이다. 배열을 두번 순회하며 원소들의 갯수를 세어 값을 정렬한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># \"\"\"</span>\n<span class=\"token comment\"># This is the interface that allows for creating nested lists.</span>\n<span class=\"token comment\"># You should not implement it, or speculate about its implementation</span>\n<span class=\"token comment\"># \"\"\"</span>\n<span class=\"token comment\"># class NestedInteger:</span>\n<span class=\"token comment\">#    def isInteger(self) -> bool:</span>\n<span class=\"token comment\">#        \"\"\"</span>\n<span class=\"token comment\">#        @return True if this NestedInteger holds a single integer, rather than a nested list.</span>\n<span class=\"token comment\">#        \"\"\"</span>\n\n<span class=\"token comment\">#    def getInteger(self) -> int:</span>\n<span class=\"token comment\">#        \"\"\"</span>\n<span class=\"token comment\">#        @return the single integer that this NestedInteger holds, if it holds a single integer</span>\n<span class=\"token comment\">#        Return None if this NestedInteger holds a nested list</span>\n<span class=\"token comment\">#        \"\"\"</span>\n\n<span class=\"token comment\">#    def getList(self) -> [NestedInteger]:</span>\n<span class=\"token comment\">#        \"\"\"</span>\n<span class=\"token comment\">#        @return the nested list that this NestedInteger holds, if it holds a nested list</span>\n<span class=\"token comment\">#        Return None if this NestedInteger holds a single integer</span>\n<span class=\"token comment\">#        \"\"\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NestedIterator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nestedList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>NestedInteger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># flatten nestedList</span>\n        self<span class=\"token punctuation\">.</span>flattenList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> nestedInteger <span class=\"token keyword\">in</span> nestedList<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nestedInteger<span class=\"token punctuation\">.</span>isInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nestedInteger<span class=\"token punctuation\">.</span>getInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># depth first search</span>\n                stack <span class=\"token operator\">=</span> nestedInteger<span class=\"token punctuation\">.</span>getList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n                    currentNestedInteger <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> currentNestedInteger<span class=\"token punctuation\">.</span>isInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>currentNestedInteger<span class=\"token punctuation\">.</span>getInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        stack<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>currentNestedInteger<span class=\"token punctuation\">.</span>getList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pointer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        nextVal <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>pointer<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>pointer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> nextVal\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>pointer <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">)</span>\n        \n\n            \n\n<span class=\"token comment\"># Your NestedIterator object will be instantiated and called as such:</span>\n<span class=\"token comment\"># i, v = NestedIterator(nestedList), []</span>\n<span class=\"token comment\"># while i.hasNext(): v.append(i.next())</span></code></pre></div>\n<p>nestedList를 순회하면서, nestedInteger가 integer인지 list인지에 따라 DFS를 수행하거나 flattenList에 넣어주면 된다.</p>","frontmatter":{"date":"September 19, 2023","title":"(Alg) LeetCode Top Interview 150 - 341. Flatten Nested List Iterator","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-341/"}},"prev":{"id":"23768c60-0ff7-5ce5-8d74-1504f5f393b5","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>matrix가 주어졌을 때, 나선형으로 flatten한 일차원 배열을 리턴하는 문제이다. <a href=\"https://leetcode.com/problems/spiral-matrix/\">링크</a></p>\n<p>2차원 배열이 입력으로 주어지지만, <code class=\"language-text\">n*1</code> 또는 <code class=\"language-text\">1*n</code> 크기의 배열이 주어질수도 있으므로 인덱스를 잘 관리해야한다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>4개의 방향과 level을 갖고, 배열을 탐색하도록 한다.</p>\n<p>배열의 값을 하나씩 넣어주고, 해당 방향을 다 탐색하였다면 다음 방향으로 넘어가도록 구현하였다.</p>\n<p>만약 마지막 방향(아래에서 위로 올라오는 방향)의 끝이라면, 다음 레벨로 넘어가면서 다음 방향으로 가도록 한다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n*m)</p>\n<p>matrix의 크기만큼 탐색하므로 배열을 만든다.</p>\n</li>\n<li>\n<p>Space complexity: O(n*m)</p>\n<p>flatten한 배열의 크기는 matrix의 크기에 비례한다.</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        m<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        spirals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        row_idx<span class=\"token punctuation\">,</span> col_idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n        level <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        direction <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        move <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        cur_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>spirals<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> m<span class=\"token operator\">*</span>n<span class=\"token punctuation\">:</span>\n            spirals<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>row_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            cur_cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> direction <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> cur_cnt <span class=\"token operator\">==</span> n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>level<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 좌우 방향 종료 조건</span>\n                direction <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                cur_cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> direction <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> cur_cnt <span class=\"token operator\">==</span> m<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>level<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 아래 방향 이동시 종료 조건</span>\n                direction <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                cur_cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> direction <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> cur_cnt <span class=\"token operator\">==</span> m<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>level<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 위 방향 종료 조건 </span>\n                direction <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                cur_cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                level <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            row_idx<span class=\"token punctuation\">,</span> col_idx <span class=\"token operator\">=</span> row_idx <span class=\"token operator\">+</span> move<span class=\"token punctuation\">[</span>direction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> col_idx <span class=\"token operator\">+</span> move<span class=\"token punctuation\">[</span>direction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">return</span> spirals</code></pre></div>\n<p>cur_cnt에서는 해당 level의 해당 방향에서 몇번이나 원소를 셌는지를 의미한다. 만약, cur_cnt가 다 찼다면 다음 레벨로 넘겨주면 되는데, 마지막 방향의 경우에는 하나를 덜 세야 다음 방향(왼쪽에서 오른쪽)이 처음부터 셀 수 있다.</p>","frontmatter":{"date":"September 25, 2023","title":"(Alg) LeetCode Top Interview 150 - 54. Spiral Matrix","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-54/"}},"site":{"siteMetadata":{"siteUrl":"https://choieastsea.github.io","comments":{"utterances":{"repo":"choieastsea/choieastsea.github.io"}}}}},"pageContext":{"slug":"/Alg-LC-94/","nextSlug":"/Alg-LC-341/","prevSlug":"/Alg-LC-54/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}