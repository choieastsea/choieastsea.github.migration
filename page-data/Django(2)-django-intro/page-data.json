{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Django(2)-django-intro/",
    "result": {"data":{"cur":{"id":"712a6369-c9cf-5e78-bf02-5ff42e5f5177","html":"<p>프로젝트를 시작하기에 앞서, 장고에 대하여 개략적으로 알아보고, 첫 장고 앱을 만들어보자!</p>\n<h2 id=\"장고란\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EB%9E%80\" aria-label=\"장고란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고란</h2>\n<p>장고는 간단하고 빠르게 웹 서비스를 구현할 수 있는 파이썬 기반의 웹 프레임워크이다.</p>\n<p>다양하고 많은 기능들이 제공되지만, 우리는 프로젝트를 위한 기능들을 위주로 공부한다.</p>\n<p>장고 서버가 http 요청에 대하여 응답을 하는 과정은 다음과 같다.</p>\n<ol>\n<li>urls.py (해당 app과 매핑)</li>\n<li>app의 어떤 기능을 사용할지 매핑</li>\n<li>views.py 에서 로직의 결과를 리턴</li>\n</ol>\n<h2 id=\"장고-세팅\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0-%EC%84%B8%ED%8C%85\" aria-label=\"장고 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고 세팅</h2>\n<p>우선, <code class=\"language-text\">Python</code>이 설치되어 있어야 한다.</p>\n<p>프로젝트를 위한 디렉토리를 만들고, 아래와 같이 수행한다.</p>\n<ol>\n<li>\n<p>가상환경 만들기</p>\n<p>다른 프로젝트들과 충돌이 나지 않게 해당 프로젝트를 위한 virtual environment가 구성되어야 한다. 가상환경에서 python library들을 설치하면 해당 환경에서만 유효한 독립적인 환경을 만들 수 있다.</p>\n<p>(참고로 깃으로 관리한다면 가상환경은 <code class=\"language-text\">.gitignore</code>에다가 넣어놓는 것을 권장함)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">>></span> python3 -m venv guri-venv\n<span class=\"token operator\">>></span> <span class=\"token builtin class-name\">source</span> guri-venv/bin/activate <span class=\"token comment\">#for mac</span></code></pre></div>\n<p>(guri-venv)로 시작하는 환경이 나온다면 성공한 것이다. 만약 가상환경을 종료하고 싶다면 <code class=\"language-text\">deactivate</code> 해주면 된다.</p>\n</li>\n<li>\n<p>필요한 종속성 라이브러리 설치하기</p>\n<p>우선, django만 설치해도 실행하는데 무리가 없다. 만약, git에서 pull 받아서 사용하고, <code class=\"language-text\">requirements.txt</code>와 같은 종속성 리스트 파일이 존재한다면, <code class=\"language-text\">pip install -r requirements.txt</code> 로 한번에 해당 파일의 라이브러리를 다운 받을 수 있다.</p>\n<p>역으로 현재 리스트를 종속성 리스트 파일로 남기고 싶다면 <code class=\"language-text\">pip freeze </code> 명령어를 이용하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">>></span> pip <span class=\"token function\">install</span> django mysqlclient django-environ</code></pre></div>\n<p>mysqlclient는 기본적으로 sqlite인 장고에서 mysql로 바꿔주기 위해서이고, django-environ은 .env 파일에 접근하기 위해서이다. <a href=\"https://django-environ.readthedocs.io/en/latest/quickstart.html\">env 참고</a></p>\n</li>\n<li>\n<p>장고 init</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">>></span> django-admin startproject config <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>장고를 설치하였다면, 위와 같이 config라는 프로젝트를 생성할 수 있다.</p>\n</li>\n<li>\n<p>runserver를 이용하여 서버 실행</p>\n<p>가상환경이 activate 된 상태에서 아래 명령어를 입력하면 된다. 뒤의 포트를 명시하지 않으면 default로 8000포트에 열린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">>></span> python manage.py runserver <span class=\"token number\">0.0</span>.0.0:8080\n\nWatching <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes with StatReloader\nPerforming system checks<span class=\"token punctuation\">..</span>.\n\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\n\nYou have <span class=\"token number\">18</span> unapplied migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>. Your project may not work properly <span class=\"token keyword\">until</span> you apply the migrations <span class=\"token keyword\">for</span> app<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: admin, auth, contenttypes, sessions.\nRun <span class=\"token string\">'python manage.py migrate'</span> to apply them.\nApril <span class=\"token number\">11</span>, <span class=\"token number\">2023</span> - <span class=\"token number\">16</span>:07:46\nDjango version <span class=\"token number\">4.2</span>, using settings <span class=\"token string\">'config.settings'</span>\nStarting development server at http://0.0.0.0:8080/\nQuit the server with CONTROL-C.</code></pre></div>\n<p>이렇게 나온다면 장고 시작하기 (경고 메시지가 나오긴 하지만) 성공이다. 브라우저에서 <code class=\"language-text\">localhost:8080</code>으로 들어가면 뭐가 나올 것이다.</p>\n<p>실제 배포환경에서는 <code class=\"language-text\">runserver</code>를 이용하진 않는다고 한다. react js에서 <code class=\"language-text\">npm start</code>로 배포하지 않듯, 배포에 최적화된 <code class=\"language-text\">gunicorn</code> 이나 <code class=\"language-text\">uwsgi</code>등의 웹서버를 이용한다고 한다. 하지만 개발단계에서는 debugging 등을 위하여 runserver 커맨드로 개발하도록 하자.</p>\n</li>\n</ol>\n<h3 id=\"환경변수-세팅\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%B8%ED%8C%85\" aria-label=\"환경변수 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경변수 세팅</h3>\n<p>django-environ을 이용하여 환경변수를 세팅해준다. manage.py가 있는 루트 디렉토리에 <code class=\"language-text\">.env</code>파일을 만들고, key=value를 공백없이 적어주면 된다.</p>\n<p>그리고, settings.py에 아래를 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> environ\n\n<span class=\"token comment\"># Build paths inside the project like this: BASE_DIR / 'subdir'.</span>\nBASE_DIR <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent\n\n<span class=\"token comment\"># for django-environ</span>\nenv <span class=\"token operator\">=</span> environ<span class=\"token punctuation\">.</span>Env<span class=\"token punctuation\">(</span>\n    <span class=\"token comment\"># set casting, default value</span>\n    DEBUG<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\nenviron<span class=\"token punctuation\">.</span>Env<span class=\"token punctuation\">.</span>read_env<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'.env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이후에는 env(‘key_name’)으로 가져와서 사용할 수 있다.</p>\n<h3 id=\"db-세팅\" style=\"position:relative;\"><a href=\"#db-%EC%84%B8%ED%8C%85\" aria-label=\"db 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 세팅</h3>\n<p>기본적으로 sqlite 서버를 사용하지만, 나는 <code class=\"language-text\">mysql</code>을 사용할 것이다(이유는 익숙하고 관리하기가 편해서…) maria db를 사용해도 엔진은 같으므로 아래와 같이 바꿔주면 된다. 우선, config/settings.py에 가서 DATABASES= { … }라고 적혀있는 곳을 수정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> env<span class=\"token punctuation\">(</span><span class=\"token string\">'DB_NANE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> env<span class=\"token punctuation\">(</span><span class=\"token string\">'DB_USER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> env<span class=\"token punctuation\">(</span><span class=\"token string\">'DB_PW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> env<span class=\"token punctuation\">(</span><span class=\"token string\">'DB_HOST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> env<span class=\"token punctuation\">(</span><span class=\"token string\">'DB_PORT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>참고로, 해당 이름의 DB는 먼저 만들어져있어야 할 것이다.</p>\n<h2 id=\"app-추가하기\" style=\"position:relative;\"><a href=\"#app-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"app 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app 추가하기</h2>\n<p>쇼핑몰을 만들기 위해, 가장 기본이 되는 상품(item)에 대한 기능을 만들어보자.</p>\n<p>장고에서는 독립적인 기능을 수행하거나, 독립적인 모델(model)에 대하여 별개의 app을 만들어서 수행하도록 한다. 앱을 만들기 위해서는 <code class=\"language-text\">python manage.py startapp {app_name}</code>과 같이 만들 수 있다. item 앱을 만들어보자!</p>\n<h2 id=\"장고-훑어보기\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"장고 훑어보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고 훑어보기</h2>\n<p>큰 구조는 아래와 같다. 우리는 startproject로 메인 앱인 config를 생성하였다. 여기서 프로젝트의 기본 세팅등을 해줄 수 있다고 보면 된다. 또한, 8080포트로 오는 request는 <code class=\"language-text\">config/urls.py</code>에서 부터 시작한다고 보면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">├── config\n│   ├── __init__.py\n│   ├── __pycache__\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n├── item\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n├── manage.py\n└── guri-venv</code></pre></div>\n<p>config의 url.py에서 요청에 따라 각 앱의 서비스로 연결시켜주면 된다. (url은 Controller와 유사한 역할이라고 볼 수 있음)</p>\n<p>이제 app의 구조를 살펴보자.</p>\n<ul>\n<li>apps.py : app의 설정</li>\n<li>models.py : app에서 정의하는 모델에 대한 내용</li>\n<li>views.py : 해당 앱으로 request가 들어왔을 때, 이를 처리하는 부분 (View에 대응)</li>\n<li>admin.py : 관리자 페이지로 접근했을 때의 내용</li>\n<li>tests.py : 테스트시 사용</li>\n<li>migrations : models.py의 내용을 DB로 변환할 때 필요한 부분</li>\n</ul>\n<p>가장 중요한 부분은 <strong>해당 기능을 위한 models을 정의하고, 이를 view에서 처리하여 응답하는 것이다.</strong> 장고에서는 모델을 정의하여 DB와 일치시키도록 할 수 있으며, 이를 <code class=\"language-text\">migrate</code>라고 한다. 또한, 장고에서 제공하는 관리자 페이지에서 model을 CRUD하기 위해 admin.py가 존재한다.</p>\n<h2 id=\"app-연결하고-테스트해보기\" style=\"position:relative;\"><a href=\"#app-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B3%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"app 연결하고 테스트해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app 연결하고 테스트해보기</h2>\n<p>conf/urls.py 에서 요청에 대하여 처리를 해주는데, 이를 item앱으로 연결시켜주자.</p>\n<ol>\n<li>\n<p>installed app에 추가</p>\n<p>우선, settings.py에서 앱을 추가해줘야 한다. 앞으로도 startapp으로 앱을 만들고, INSTALLED_APPS에 추가해주도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'item.apps.ItemConfig'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># or just 'item'</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>app 이름 또는 apps.py에 있는 config class이름을 넣어줘도 된다. <strong>추가할 때 컴마(,)를 잊지 않도록 하자!</strong></p>\n</li>\n<li>\n<p>urls.py 수정</p>\n<p>config/urls.py에 아래와 같이 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'item/'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'item.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>item/urls.py 생성</p>\n<p>item/urls.py를 만들고, 아래와 같이 작성해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> item <span class=\"token keyword\">import</span> views\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>item/views.py 수정</p>\n<p>위에서 해준 라우팅 처리를 받아줄 view 함수를 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse\n<span class=\"token comment\"># Create your views here.</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'info'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<p>이러고 localhost:8000/item을 브라우저에 입력하면 위의 응답결과가 나오는 것을 확인할 수 있다. 참고로 view 함수는 request를 첫번째 인자로 받도록 한다.</p>\n<p>오늘은 url 입력에 대하여 response를 주는 흐름을 그려보았다. 코드는 <a href=\"https://github.com/choieastsea/market-guri-django/commit/aa366d767b3eb62bd25041d7d5c2bebbff34aae0\">이곳</a>을 참고하면 된다.</p>","excerpt":"프로젝트를 시작하기에 앞서, 장고에 대하여 개략적으로 알아보고, 첫 장고 앱을 만들어보자! 장고란 장고는 간단하고 빠르게 웹 서비스를 구현할 수 있는 파이썬 기반의 웹 프레임워크이다. 다양하고 많은 기능들이 제공되지만, 우리는 프로젝트를 위한 기능들을 위주로 공부한다. 장고 서버가 http 요청에 대하여 응답을 하는 과정은 다음과 같다. urls.py (해당 app과 매핑) app의 어떤 기능을 사용할지 매핑 views.py 에서 로직의 결과를 리턴 장고 세팅 우선, 이 설치되어 있어야 한다. 프로젝트를 위한 디렉토리를 만들고, 아래와 같이 수행한다. 가상환경 만들기 다른 프로젝트들과 충돌이 나지 않게 해당 프로젝트를 위한 virtual environment가 구성되어야 한다. 가상환경에서 python library들을 설치하면 해당 환경에서만 유효한 독립적인 환경을 만들 수 있다. (참고로 깃으로 관리한다면 가상환경은 에다가 넣어놓는 것을 권장함) (guri-venv)로 시작하는…","frontmatter":{"date":"April 12, 2023","title":"(Django) 장고 api 서버를 이용한 프로젝트 [2-django 기초]","categories":"BE","author":"choieastsea","emoji":"🙄"},"fields":{"slug":"/Django(2)-django-intro/"}},"next":{"id":"376d81e6-a8ee-5dcb-8dec-4337de0416a9","html":"<h2 id=\"계기\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EA%B8%B0\" aria-label=\"계기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계기</h2>\n<p>방학동안 서비스를 운영하기 위해 api 서버로 장고를 사용한 경험이 있다.</p>\n<p>우리 서비스에서 장고를 사용한 가장 큰 이유는, 비스니스 로직에서 필요한 라이브러리가 파이썬에서만 사용가능했기 때문이다. 물론, 해당 역할을 별개의 서버로 분리하는 방법도 가능하지만, 장고는 복잡한 설정 없이 <strong>admin page</strong>를 구현할 수 있고 소수의 인원이 여러 언어를 이용하는 것이 불편하고, 시간 단축에도 용이할 것 같아 선택하였다.</p>\n<p>풀스택으로 단기간에 완성해야 하는 입장이였으므로 정리를 할 필요를 느껴, 장고를 다시 복기해보려고 한다. 또한, 장고에서 RESTful한 서버를 위한 많은 클래스와 기능이 제공되는 <code class=\"language-text\">DRF</code>를 도입하여 많은 것들을 개선해보도록 하자.</p>\n<h2 id=\"간략한-소개\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%9E%B5%ED%95%9C-%EC%86%8C%EA%B0%9C\" aria-label=\"간략한 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간략한 소개</h2>\n<p>이 프로젝트에서는 간단한 <strong>회원제 쇼핑몰 페이지</strong>를 만들어보며 장고에 대하여 정리해보고자 한다.</p>\n<p>서버는 api server로, <code class=\"language-text\">django</code>를 이용하여 구축할 예정이고, 프론트엔드는 <code class=\"language-text\">React js</code>로 간단하게 만들어볼 예정이다.!</p>\n<ul>\n<li>서버 코드 링크 : <a href=\"https://github.com/choieastsea/market-guri-django\">https://github.com/choieastsea/market-guri-django</a></li>\n<li>프론트 코드 링크 : <a href=\"https://github.com/choieastsea/market-guri-react\">https://github.com/choieastsea/market-guri-react</a></li>\n</ul>\n<p>각각 포스트별로 커밋을 해놨으니, 커밋을 따라오는 것도 도움이 될 것이다.</p>\n<h2 id=\"전제\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%A0%9C\" aria-label=\"전제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전제</h2>\n<ul>\n<li>파이썬 코드를 읽을 줄 안다.</li>\n<li>서버의 역할을 대략 알고 있다.</li>\n<li>front end와 back end 서버 사이에서 rest api를 이용해본 적이 있다.</li>\n<li>postman 등의 api플랫폼을 사용해 본 경험이 있다.</li>\n</ul>\n<h2 id=\"개발-환경\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD\" aria-label=\"개발 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발 환경</h2>\n<ul>\n<li>Django 4.X</li>\n<li>DRF 3.X</li>\n<li>Python 3.10.X</li>\n<li>node v19.X (CRA)</li>\n</ul>\n<h2 id=\"계획\" style=\"position:relative;\"><a href=\"#%EA%B3%84%ED%9A%8D\" aria-label=\"계획 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계획</h2>\n<ul>\n<li>(1) 설계 및 기획 : 정기 구독이 가능한 쇼핑몰 웹서비스 ‘마켓 구리’ -> db 설계 &#x26; api 설계</li>\n<li>(2) Django란</li>\n<li>(3) Django model</li>\n<li>(4) DB (migration)</li>\n<li>(5) Serializer / Django ORM 사용법 (queryset)</li>\n<li>(6) DRF CBV</li>\n<li>(7) 전체적인 구조 복습. 브라우저와의 연결</li>\n<li>(8) user / custom user -> login, signup</li>\n<li>(9) Abstract User custom + SessioinAuthentication</li>\n<li>(10) SessioinAuthentication</li>\n<li>(11) custom permission + CBV에 적용</li>\n<li>(12) item model 고도화</li>\n<li>(13) admin 기본</li>\n<li>(14) 배포를 위한 설정 (settings, collectstatic, https)</li>\n<li>(15) admin to S3 (collectstatic)</li>\n<li>(16) ckeditor in admin</li>\n</ul>\n<p>프론트는 기능별(서버에 의존적인)로 커밋을 남겨놓아 이후 다른 서버 프레임워크에서도 적용하기 쉽도록 구현해보고자 한다.</p>\n<p>참고로 공부하는 단계이므로 틀린 내용이 있을 수 있으니 지적은 환영입니다!</p>","frontmatter":{"date":"April 11, 2023","title":"(Django) 장고 api 서버를 이용한 프로젝트 [0-시작]","categories":"BE","author":"choieastsea","emoji":"🙄"},"fields":{"slug":"/Django(0)-init/"}},"prev":{"id":"e34e2492-ff4f-5260-be49-839350a0dc0e","html":"<h2 id=\"장고-모델\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0-%EB%AA%A8%EB%8D%B8\" aria-label=\"장고 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고 모델</h2>\n<p>저번에는 localhost:8000/item/ 를 브라우저에 입력하면 응답하도록 하였다. 이번에는 item <strong>model</strong>을 정의하고, 이를 DB에 적용(<strong>migrate</strong>)시켜보자.</p>\n<p>django에서 제공하는 model은 우리가 다루는 데이터의 객체를 의미한다고 볼 수 있고, 하나의 모델 클래스는 관계형 DB에서의 한 table이라고 볼 수 있다. 우리 프로젝트에서 다루는 ”상품”을 정의해보자.</p>\n<h2 id=\"item-모델-정의\" style=\"position:relative;\"><a href=\"#item-%EB%AA%A8%EB%8D%B8-%EC%A0%95%EC%9D%98\" aria-label=\"item 모델 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>item 모델 정의</h2>\n<table>\n<thead>\n<tr>\n<th>field</th>\n<th>type(mysql)</th>\n<th>info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>item_id(pk)</td>\n<td>auto increment int</td>\n<td>상품코드(1부터 증가)</td>\n</tr>\n<tr>\n<td>name</td>\n<td>varchar</td>\n<td>상품명</td>\n</tr>\n<tr>\n<td>price</td>\n<td>int(positive)</td>\n<td>상품가격</td>\n</tr>\n<tr>\n<td>stock_count</td>\n<td>int(positive)</td>\n<td>현재 상품의 남은 수량</td>\n</tr>\n</tbody>\n</table>\n<p>우선 간단하게 이정도만 정의해보도록 하자. 이러한 필드들은 언제든지 수정이 가능하며, 충돌이 생긴다면 이에 대한 해결책을 제시해주는 것도 장고의 장점이다!</p>\n<p>위의 모델을 만들기 위해서는 item/models.py 로 가서 클래스를 아래와 같이 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    item_id <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>AutoField<span class=\"token punctuation\">(</span>primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'상품코드'</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'상품명'</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>PositiveIntegerField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'상품가격'</span><span class=\"token punctuation\">)</span>\n    stock_count <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>PositiveIntegerField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'남은수량'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'item'</span>\n        verbose_name <span class=\"token operator\">=</span> <span class=\"token string\">'상품'</span>\n        verbose_name_plural <span class=\"token operator\">=</span> <span class=\"token string\">'상품들'</span>\n</code></pre></div>\n<p>verbose_name은 설명이라고 보면 되고, db의 column_name도 <code class=\"language-text\">db_column=</code> 파라미터로 수정이 가능하다.!</p>\n<p>위의 타입들은 <a href=\"https://docs.djangoproject.com/en/4.2/ref/models/fields/\">공식문서</a>를 참고하여 작성이 가능하다. pk의 경우에는 지정하지 않아도 table에 생성해주지만 이렇게도 생성해줄 수 있다. 외래키, 장고에서만 존재하는 OneToOneField 등 다양한 방법으로 참조타입 역시 구현할 수 있으므로 참고하도록 한다.</p>\n<p>장고의 모델은 DB의 테이블과 매칭되기에, 테이블의 schema에 개입할 수 있도록 <strong>다양한 커스텀 옵션</strong> 또한 주어진다. 대표적으로, verbose_name, column_name, table_name 등이 있으며 이는 검색하여 찾아볼 수 있다.</p>\n<p>직관적으로 <u>DB를 추상화하여(sql등의 DB코드 없이) 다룰 수 있지만, 이에 대한 trade-off로 framework의 문법과 구성을 이해해야 한다는 단점</u>이 있을 것이다. 하지만 익숙해진다면 (유지보수나 보안 측면에서 검증된 코드이므로) 더 편하게 개발할 수 있을 것이라 믿는다.</p>\n<p>다음에는 정의한 모델을 DB에 반영하는 migration에 대하여 알아보도록 하자.</p>","frontmatter":{"date":"April 13, 2023","title":"(Django) 장고 api 서버를 이용한 프로젝트 [3 - Django model]","categories":"BE","author":"choieastsea","emoji":"🙄"},"fields":{"slug":"/Django(3)-model/"}},"site":{"siteMetadata":{"siteUrl":"https://choieastsea.github.io","comments":{"utterances":{"repo":"choieastsea/choieastsea.github.io"}}}}},"pageContext":{"slug":"/Django(2)-django-intro/","nextSlug":"/Django(0)-init/","prevSlug":"/Django(3)-model/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}