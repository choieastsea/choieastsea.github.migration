{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"58e58574-532c-58d8-b995-c3e9bc10bde6","excerpt":"드디어 블로그의 자잘한 오류들을 해결하였다. 사실 제대로 해결하지 못하여 다시 깃허브 저장소를 만들어서 클론해왔다(package-lock.json의 버전 충돌을 해결하라해서 했는데도 왜 해결이 안되는 거죠 ㅠ)… 깃허브에서 토큰으로 인증하여 저장소에 접근하는 것도 이번에 처음으로 해봤다. 앞으로 정기적으로 업데이트 체크를 해서 블로그 업로드가 먹통이 되는 일이 없도록 해야겠다. 블로그를 다시 동작하게 하면서 올해 나의 목표를 세워봐야겠다. 물론 계획세우기엔 늦었지만, 이 계획도 지킨다고 보장할 수 없으니까! (?) 웹 서비스에 대한 이해 React 나는 여태까지 가 곧 리액트인 줄 알았다. 는 리액트로 프론트엔드를 구성하기 위한 framework나 boilerplate에 가깝다. 이외에도 프론트를 리액트로 사용하는 프로젝트로는 ,  등이 있다는 것을 알게 되었다. 장단점을 고려하여 상황에 맞는 프로젝트를 사용하도록 해야겠다! 또한, 리액트에서 상태 관리를 하기 위해 사용하는 와 같…","fields":{"slug":"/my-plan/"},"frontmatter":{"categories":"blog","title":"(2022) My Plan in 2022","date":"January 18, 2022"}},"next":{"fields":{"slug":"/FE-Webpack-2/"}},"previous":null},{"node":{"id":"75b2f83b-37cb-5304-aaf9-7188e35f9e96","excerpt":"Webpack (2) config, mode와 loader 본 포스팅의 내용은 생활코딩님의 강의를 들으면서 간단하게 정리한 것입니다. webpack.config.js (웹팩 설정 파일) 만들어 설정해주기 웹팩에게 어떻게 번들링하는지 시키는 방법에 대한 것은 크게 두가지가 있다. 를 이용하여 명령어로 입력을 한다. 이전의 방법과 같이 등과 같이 명령어를 입력할 수도 있다. 하지만, 이는 번들링을 할때마다 어딘가에 명령어를 저장해놓거나 기억하고 있어야 한다. 설정 파일을 만든다. 웹팩 공식 document을 참고하여 파일을 작성하고 으로 번들링을 진행해줄 수도 있다. 간단하게 위의 내용을 설정 파일에다가 만들어보자. 파일이름을 라고 지었다면 간단하게 만으로 번들링이 된다. cli를 통하여 했을때랑 같은 결과가 나오게 되는 것을 확인할 수 있다. mode 설정하기 이전에는 아주 간단하게 웹팩설정을 해주었지만, 이라는 경고문구가 뜨는 것을 확인할 수 있다. 모드는 크게 developmen…","fields":{"slug":"/FE-Webpack-2/"},"frontmatter":{"categories":"FE","title":"(FE) Webpack (2) config, mode와 loader","date":"January 13, 2022"}},"next":{"fields":{"slug":"/FE-Webpack-1/"}},"previous":{"fields":{"slug":"/my-plan/"}}},{"node":{"id":"164cee99-59db-564e-ae2d-20184e5833e3","excerpt":"Webpack (1) 웹팩 기본 본 포스팅의 내용은 생활코딩님의 강의를 들으면서 간단하게 정리한 것입니다. 아주 간단하게 로컬 웹서버를 띄우는 방법 :  설치 후, 로 해당 디렉토리에서 웹서버 실행 가능! webpack-tutorial 폴더에  실행하여 노드 프로젝트로 세팅해주었다. 계기 : 리액트를 CRA없이 하려고 보니, 웹팩이라는 것이 있다는 것을 알게 되었다. 당연하게 생각하였던 과정들에 대한 이해를 통하여 발전할 수 있을 것이다! Why webpack? 많은 파일들이 모여 하나의 웹사이트를 만드는데, 다양한 문제가 발생할 수 있다. 기존 웹서비스의 문제점 1. 다양한 파일에서 충돌에 대응하기 어렵다.  이러고 를 통하여 로컬서버(localhost:8080)에 들어가보면 어떻게 보여질지 예상해보자. word라는 전역 변수는 hello.js에도 있고 world.js에도 존재하므로(confict 발생) 더 뒤에 선언된 world.js의 word로 덮어씌우기 될 것이다.  여러 …","fields":{"slug":"/FE-Webpack-1/"},"frontmatter":{"categories":"FE","title":"(FE) Webpack (1) 웹팩 기본","date":"January 12, 2022"}},"next":{"fields":{"slug":"/DS05-Heap/"}},"previous":{"fields":{"slug":"/FE-Webpack-2/"}}},{"node":{"id":"f83049d2-462d-55ec-b98f-2ddec347a1a4","excerpt":"Tree의 종류인 Heap에 대하여 알아보도록 하자. Heap (힙)이란  부모노드가 자식노드보다 큰(혹은 작은) 완전 이진 트리를 의미한다. 형제 노드간의 대소관계는 상관없이 오직 부모와 자식관의 대소관계만 보면 된다. 완전이진트리는 마지막 레벨을 제외한 모든 노드가 가득차있고, 마지막 레벨은 왼쪽부터 순서대로 채워져 있는 이진트리이다. 부모가 자식보다 큰 힙을 , 부모가 자식보다 작은 힙을 이라고 한다. 최대힙의 경우 모든 노드의 값 중 최댓값이 루트 노드로 오게 되며, 최소힙은 최솟값이 루트노드로 오게 되는 것이 자명하다. 이러한 힙의 속성을 이용하여 루트 노드를 반복적으로 하는 (힙 정렬)을 구현할 수 있다. 또한 우선순위에 따라 선순선출(?)이 되는(우선순위 큐) 추상자료형을 구현할 수 있다. 완전 이진 트리 구현 우선 힙의 구조적인 형태는 Complete Binary Tree(완전 이진 트리)이다. 이는 이전 게시글과 같이 노드간의 레퍼런스로 구현할 수도 있지만, 배열로…","fields":{"slug":"/DS05-Heap/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) Heap","date":"November 15, 2021"}},"next":{"fields":{"slug":"/DS04-Tree/"}},"previous":{"fields":{"slug":"/FE-Webpack-1/"}}},{"node":{"id":"19b36e89-13e5-59ef-85e9-e9ac1c6d5531","excerpt":"(트리)는 계층적인 구조를 나타내기 위한 자료구조이다. 나무를 뒤집어 놓은 듯한 구조로 보통 표현되며, 뿌리인 root node에서부터 자식 노드로 단방향으로 뻗어져 나간다. 파일 디렉토리가 트리의 경로와 같이 표현되어 있으며 (ex C>>Desktop>>Document>>index.md), ,   등에도 사용된다. 트리 위키백과 Tree 용어  root(루트) : 최상위 계층에 있는 노드. 한 트리에서 루트 노드는 유일하게 존재한다. level(레벨) : 루트에서 특정노드까지의 거리(엣지의 수) parent/child node(부모-자식 노드) : 한 노드와 직접 연결되어 있는 경우, 부모 자식 노드의 관계이다. 가리키는 노드가 부모, 아닌 노드가 자식 노드라고 보면 된다. sibing nodes(형재 노드) : 같은 부모 노드를 갖는 노드 height(높이) : 트리의 높이 ==  sub tree(서브 트리) : 한 노드를 기준으로 하는 트리. 트리를 재귀적으로 볼 수 있게 해…","fields":{"slug":"/DS04-Tree/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS)트리와 이진트리 탐색 Tree & Binary Tree traverse","date":"November 05, 2021"}},"next":{"fields":{"slug":"/FE-JS-copy/"}},"previous":{"fields":{"slug":"/DS05-Heap/"}}},{"node":{"id":"8b6696db-6098-577e-8a21-f90d144ae266","excerpt":"결론 복사 : 내용은 완전히 같지만, 주소는 완전히 다른 사본을 만들어내는 것 : 원본과 참조 공유가 있어 상황에 따라 문제가 생길 수 있는 복사, depth가 1인 복사 : 내용만 같고 모든 원소의 주소는 달라 원본과 완전히 독립된 복사 복사 판단방법 즉, 모든 원소의 내용은 같으면서 ===의 결과가 false가 나와야(다른 주소를 참조, 원본과 독립되어있다는 의미) 깊은 복사가 된 것이다. 같은 방법을 통하여 복사를 했더라도 객체의 깊이에 따라 얕은 복사가 될 수도, 깊은 복사가 될 수도 있다! 계기 React.js에서 state(상태)를 다루다보면 이라는 속성이 굉장히 중요 하게 여겨진다. 리액트에서 불변성이란, 기존의 값을 직접 수정하지 않으면서 새로운 값을 만들어 내는 것을 의미한다. 새로운 값이라는 것은 원본과는 완전히 독립된 사본에서 변형이 이루어진 데이터이며, 이를 위해 깊은 복사의 개념을 익힐 필요를 느끼게 되었다. 사전 지식 Primitive type과 Refer…","fields":{"slug":"/FE-JS-copy/"},"frontmatter":{"categories":"FE","title":"(JS) 얕은복사와 깊은복사(shallow and deep copy) & aliasing","date":"October 24, 2021"}},"next":{"fields":{"slug":"/FE-React-hooks-2/"}},"previous":{"fields":{"slug":"/DS04-Tree/"}}},{"node":{"id":"ffd441a4-4019-57eb-90de-dea9ed0004e3","excerpt":"(React) Hooks (2) useCallback, useMemo 나는 여태까지 useState와 useEffect로만 모든 프로젝트를 진행하였다. 이제 기능구현은 되니까 성능 최적화를 해보도록 하자! useEffect는 특정 조건(변수의 값이 바뀌거나 마운트, 언마운트 되었을 때)에 일어날 행동들(side effects)을 수행하는 Hook이다. useCallback은 함수를 memoization시켜놓아 모든 렌더링 시 함수가 재실행되지 않고, 특정 조건시에만 함수를 반환하여 실행도록 한다. useMemo는 변수를 ~~ 배열인자에 들어있는 의존성이 바뀌었을때 실행되는 것은 같지만, useEffect는 안의 내용이 실행되고, useMemo는 안의 변수를 반환하고 useCallback은 안의 함수를 반환한다.","fields":{"slug":"/FE-React-hooks-2/"},"frontmatter":{"categories":"FE","title":"(React) Hooks (2) useCallback, useMemo","date":"October 22, 2021"}},"next":{"fields":{"slug":"/FE-React-hooks-1/"}},"previous":{"fields":{"slug":"/FE-JS-copy/"}}},{"node":{"id":"5ad2aee6-9e68-5a85-9917-d2af9e38d633","excerpt":"(React) Hooks (1) useState, useEffect Hooks는 함수형 컴포넌트에서 다양한 작업을 할 수 있도록 도와주는 함수이다. 기존에는 class형 컴포넌트에서만 가능했던 기능을 hook을 통하여 functional component에서 사용가능하게 되었으며, 로직을 재사용할 수 있게 되었고, 코드의 이해도를 높일 수 있게 되었다. 보통 hook은 , 와 같이 use~로 시작하는 경우가 많고, 리액트에서 제공하는 hook\n뿐만 아니라 customized 하여 사용할 수도 있다. 그 중 가장 기본적인 훅인 와 에 대하여 알아보자. useState 함수형 컴포넌트에서 state(상태)를 바꿔줄 수 있도록 하는 가장 기본적인 Hook이다. 의 인자로는 해당 state의 초깃값을 넣어주며, 로 구성된 배열을 반환한다. useState 사용법 우선 useState를 import하고 사용해야 한다. 다음 예제를 보도록 하자! 를 보면 value라는 이름을 갖고 초깃값이 …","fields":{"slug":"/FE-React-hooks-1/"},"frontmatter":{"categories":"FE","title":"(React) Hooks (1) useState, useEffect","date":"October 12, 2021"}},"next":{"fields":{"slug":"/DS03-ADT/"}},"previous":{"fields":{"slug":"/FE-React-hooks-2/"}}},{"node":{"id":"1f5b55d1-79b3-570b-83ef-83ed55f01a39","excerpt":"추상자료형에 대하여 공부해보고, stack과 queue에 대하여 알아보자. Abstract Data Type(ADT, 추상자료형) 스택은이다. 추상자료형은 자료구조를 추상화한 것으로, 구현보다는 기능에만 초점을 맞춘다. 를 배울 때 에 대하여 배운 적이 있을텐데, 이는 실제 구현된 것이 아니고 기능에 대한 메서드만 명시되어 있다. 이를 implement한 클래스가 정해놓은 기능을 구현하는 방식으로 되어있다. list, set, dictionary, stack, queue는 모두 추상자료형으로 정해진 기능만을 담고 있으며 다양한 방법으로 구현될 수 있다. 예를 들어 스택은 다양하게 구현할 수 있지만, 우리는 array를 이용하여 직접 구현해볼 것이다. Stack이란 Stack(스택)은 메모리의 끝에서만 operation이 이루어지는 선형 자료구조로, 차곡차곡 쌓아올린 형태를 생각하면 이해하기 편하다.  (물론 메모리가 저렇게 생기지는 않았을 것이다. 단지 스택을 그릴때 저렇게 표현한…","fields":{"slug":"/DS03-ADT/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS)ADT 추상자료형 - Stack & Queue","date":"October 09, 2021"}},"next":{"fields":{"slug":"/DS02-LinkedList/"}},"previous":{"fields":{"slug":"/FE-React-hooks-1/"}}},{"node":{"id":"d2a012e0-3dba-5c82-b90f-2a0682b200c8","excerpt":"LinkedList란 LinkedList(연결리스트)는 리스트라는 추상자료형을 구현하는 선형 자료구조 중 하나로, 끼리 참조를 통하여 연결되어 선형적인 형태를 이루고 있는 자료구조이다. Array는 크기가 정해져 있고 메모리에서 연속적으로 존재하였지만, 링크드 리스트는 각 노드에 데이터가 저장되어 있으며 이웃한 노드의 정보(주소)를 가리키고 있는 형태로 여러 데이터를 저장한다.  간단하게 위의 그림으로 Array와 LinkedList를 비교해볼 수 있다. 연결리스트에서는 데이터가 노드에 저장되며, 노드끼리의 연결관계가 존재한다. 또한 head와 tail은 각각 처음과 마지막 노드를 가리키고 있어 모든 노드에 접근할 수 있게 되는 것이다. 따라서 각 노드는 메모리상에서 연속적으로 존재할 필요가 없으며, 데이터의 자료형이 같을 필요도 없을 것이다. LinkedList 구현 요구 사항 LinkedList에서는 배열과 다르게 데이터를 에서 갖고 있도록 한다. 노드는 데이터를 갖고 있으며,…","fields":{"slug":"/DS02-LinkedList/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) LinkedList","date":"October 04, 2021"}},"next":{"fields":{"slug":"/DS01-ArrayList/"}},"previous":{"fields":{"slug":"/DS03-ADT/"}}},{"node":{"id":"85417fbe-3e19-5b0b-a846-28bfdfe681cb","excerpt":"언어마다 다른 자료구조 JavaScript의 Array의 MDN 설명을 보면 다음과 같다. 배열은 프로토타입으로 탐색과 변형 작업을 수행하는 메서드를 갖는, 리스트와 비슷한 객체입니다. JavaScript에서 배열의 길이와 요소의 자료형은 고정되어 있지 않습니다. 배열의 길이가 언제든지 늘어나거나 줄어들 수 있기 때문에 JavaScript 배열들은 밀집도가 보장되지 않습니다. JS의 Array는 key가 int type index인 이다. 배열은 length라는 특별한 프로퍼티를 갖고 있으며, 이와 관련된 함수가 제공된다. 배열의 길이는 정해져 있지 않으며 각 원소의 크기 또한 정해져 있지 않다. 메모리상에서 연속된 형식으로 저장되어 있다고 보장을 못하는 이다. C, Java의 Array는 크기와 타입이 정해져 있는 **정적배열(static array)**이다. 따라서 선언시에 메모리 공간이 할당되며 모든 원소의 타입이 고정되어 있다. 크기가 정해져 있으므로 요소의 삽입과 삭제가 …","fields":{"slug":"/DS01-ArrayList/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) ArrayList","date":"September 12, 2021"}},"next":{"fields":{"slug":"/how-to-md/"}},"previous":{"fields":{"slug":"/DS02-LinkedList/"}}},{"node":{"id":"a108727b-4453-5e00-8401-77b296782473","excerpt":"나는 에디터로 을 작성중이다. 툴에 따라 마크다운 문법이 조금씩 다르다고 알고 있다. 은 에디터에서 쉽게 사용할 수 있도록 고안된 방법으로, 읽고 쓰기 편하며 로의 변환이 편한 것이 장점이다. 웹사이트를 만들어서 글을 작성한다면, 일일이 HTML코드를 작성하기보다, 마크다운으로 작성한 후 HTML로 변환하여 업로드하는 것이 효과적이다. 나 를 운영한다면 ‘~.md’파일을 많이 접하게 될 것이다. 간단하게 문법을 알고 있으면 좋을 것 같아 정리해본다. markdown을 알기 위해서는 HTML의 간단한 태그들을 알고 있는 것이 좋을 것이다. md 파일이 아무래도 HTML을 고려하고 만들어진 형식이니까… HTML HTML 태그는 그냥 작성하면 된다. 모든 태그를 지원하지는 않는다. 애초에 HTML이 귀찮아서 markdown으로 작성하는 경우가 많은데, 굳이 HTML 문법을 사용할 필요는 많지 않아보인다. 가끔 줄띄우기같을 때는 사용해볼 수 있겠다. 이하는 내가 많이 작성하는 순서대로 적…","fields":{"slug":"/how-to-md/"},"frontmatter":{"categories":"블로그","title":"블로그를 위한 Markdown 작성법","date":"September 03, 2021"}},"next":{"fields":{"slug":"/DS00-start/"}},"previous":{"fields":{"slug":"/DS01-ArrayList/"}}},{"node":{"id":"ecfecc2e-61ee-57a4-a949-6cb53e7fa025","excerpt":"자료구조 도서관에서 책을 찾을 때를 생각해보자. 만약 ‘로미오와 줄리엣’책을 찾는다면,  순으로 찾는다. 도서관에서 책을 찾을 수 있는 이유는 도서관에서 일정한 기준으로 책을 구조화하였기 때문이다. 일정한 약속대로 짜여진 구조가 있으므로 누구나 원하는 책을 찾을 수 있게 된다.\n컴퓨터에 데이터를 저장할 때에도 일정한 구조에 맞게 데이터를 저장한다. 우리는 이를 라고 한다. 도서관의 책을 ‘출판일자’순으로 배치하였다면 우리는 찾기 힘들 것이다. 이와 같이 각 자료구조에는 더 나은(빠르고 편한) 방법이 존재할 수 있다. 데이터를 저장하고 관리하기 위해 사용하는 구조 자료구조는 데이터의 효율적인 접근 및 조작을 가능하게 해주는 저장 및 관리 방식이라고 볼 수 있다.\n우리는 상황에 따라 최선의 자료구조 선택을 통하여 효율적인 프로그램을 짤 수 있을 것이다! 자료구조의 종류  향후 학습 방향 상황에 따라 더 맞는 자료구조가 있으며, 우리는 이를 성능(시간, 공간 복잡도)으로 판단할 수 있어…","fields":{"slug":"/DS00-start/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) 자료구조 시작","date":"September 03, 2021"}},"next":{"fields":{"slug":"/first-post/"}},"previous":{"fields":{"slug":"/how-to-md/"}}},{"node":{"id":"57e12155-0332-585f-a3eb-5992940c6021","excerpt":"블로그에 대하여 기존 jekyll을 이용한 블로그를 재편하면서 테마를 찾아봤는데, gatsby라는 정적 사이트 생성 툴을 이용한 경우도 많이 있다고 들었다. 그러다가 zoomkoding.com을 방문하게 되었고, 이 분이 정말 깔끔하게 블로그 테마를 만드셔서 이를 사용하게 되었다. 향후 방향 전공 공부 기록하기 자료구조 및 알고리즘 온라인 저지 문제 해결 프론트 엔드 공부하기  공부 컴포넌트 최적화 CRA 없이 리액트 프로젝트 만들기 Context, Redux와 같은 상태 관리 라이브러리 활용하기 SSR deep  자바스크립트 익숙해지기  공부 CSS flexbox, grid 등 기본적인 css tailwind, bootstrap과 같은 라이브러리 Browser와 통신 HTTP(s), 쿠키, DOM, BOM 등 웹서비스에 대한 전반적인 공부 PWA 검색엔진 최적화 서버 프로그래밍 프로젝트 실제 웹사이트 배포 github, prettier등 협업 툴 오픈 소스 만들어보기 블로그 카테…","fields":{"slug":"/first-post/"},"frontmatter":{"categories":"블로그","title":"gatsby를 이용한 블로그 첫 포스트","date":"September 01, 2021"}},"next":{"fields":{"slug":"/FE-Webpack-1/my-plan/"}},"previous":{"fields":{"slug":"/DS00-start/"}}},{"node":{"id":"fb2a1911-62ab-552a-a67e-d5744a60cd31","excerpt":"드디어 블로그의 자잘한 오류들을 해결하였다. 사실 제대로 해결하지 못하여 다시 깃허브 저장소를 만들어서 클론해왔다(package-lock.json의 버전 충돌을 해결하라해서 했는데도 왜 해결이 안되는 거죠 ㅠ)… 깃허브에서 토큰으로 인증하여 저장소에 접근하는 것도 이번에 처음으로 해봤다. 앞으로 정기적으로 업데이트 체크를 해서 블로그 업로드가 먹통이 되는 일이 없도록 해야겠다. 블로그를 다시 동작하게 하면서 올해 나의 목표를 세워봐야겠다. 물론 계획세우기엔 늦었지만, 이 계획도 지킨다고 보장할 수 없으니까! (?) 웹 서비스에 대한 이해 React 나는 여태까지 가 곧 리액트인 줄 알았다. 는 리액트로 프론트엔드를 구성하기 위한 framework나 boilerplate에 가깝다. 이외에도 프론트를 리액트로 사용하는 프로젝트로는 ,  등이 있다는 것을 알게 되었다. 장단점을 고려하여 상황에 맞는 프로젝트를 사용하도록 해야겠다! 또한, 리액트에서 상태 관리를 하기 위해 사용하는 와 같…","fields":{"slug":"/FE-Webpack-1/my-plan/"},"frontmatter":{"categories":"blog","title":"(2022) My Plan in 2022","date":"January 18, 2021"}},"next":null,"previous":{"fields":{"slug":"/first-post/"}}}],"categories":["All","blog","FE","Algorithms","블로그"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}