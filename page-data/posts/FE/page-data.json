{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/FE",
    "result": {"pageContext":{"currentCategory":"FE","categories":["All","FE","ADsP","Alg","WEB","블로그","Algorithms"],"edges":[{"node":{"id":"9a688842-eb40-50d7-b34e-347257440a0e","excerpt":"React로 웹사이트를 만드는 가장 대표적인 3가지 방법이 있는데, CRA, NextJS, Gatsby이다. 그중에서, Gatsby는 정적 페이지 생성에 대한 것이고, CRA는 가장 쉽고 입문하기 좋은 보일러 플레이트라고 알려져있다. 나도 CRA로만 리액트 공부를 했었는데, 라우팅, SSR, 코드 스플리팅 등의 세팅에 어려움이 있었다. 이에 반해, Next.JS는 리액트를 위한 프레임워크로 몇가지 규칙을 이해한다면 간편하게 기능을 이용할 수 있다. 또한 기본적으로 서버사이드렌더링(SSR)을 제공하여 이의 장점을 이용할 수도 있다. 이외에도 다양한 기능들이 제공되니 한번 시간 내서 배워보자! 오늘은 넥스트로 간단한 정적인 페이지를 만드는 방법에 대하여 공부해보겠다. Next.js Project 시작하기 우선, node js(12.22.0 이후)와 npm이 깔려 있어야 한다. 간단하게 만 해주면 된다! yarn의 경우, 을 해주면 된다. 프로젝트 기본 정보를 입력한 이후,  또는 로 …","fields":{"slug":"/FE-NextJS-1/"},"frontmatter":{"categories":"FE","title":"(React) NextJS 입문해보기 - (1)","date":"March 10, 2022"}},"next":{"fields":{"slug":"/ADsP-3-(3)-2/"}},"previous":null},{"node":{"id":"75b2f83b-37cb-5304-aaf9-7188e35f9e96","excerpt":"Webpack (2) config, mode와 loader 본 포스팅의 내용은 생활코딩님의 강의를 들으면서 간단하게 정리한 것입니다. webpack.config.js (웹팩 설정 파일) 만들어 설정해주기 웹팩에게 어떻게 번들링하는지 시키는 방법에 대한 것은 크게 두가지가 있다. 를 이용하여 명령어로 입력을 한다. 이전의 방법과 같이 등과 같이 명령어를 입력할 수도 있다. 하지만, 이는 번들링을 할때마다 어딘가에 명령어를 저장해놓거나 기억하고 있어야 한다. 설정 파일을 만든다. 웹팩 공식 document을 참고하여 파일을 작성하고 으로 번들링을 진행해줄 수도 있다. 간단하게 위의 내용을 설정 파일에다가 만들어보자. 파일이름을 라고 지었다면 간단하게 만으로 번들링이 된다. cli를 통하여 했을때랑 같은 결과가 나오게 되는 것을 확인할 수 있다. mode 설정하기 이전에는 아주 간단하게 웹팩설정을 해주었지만, 이라는 경고문구가 뜨는 것을 확인할 수 있다. 모드는 크게 developmen…","fields":{"slug":"/FE-Webpack-2/"},"frontmatter":{"categories":"FE","title":"(FE) Webpack (2) config, mode와 loader","date":"January 13, 2022"}},"next":{"fields":{"slug":"/FE-Webpack-1/"}},"previous":{"fields":{"slug":"/my-plan/"}}},{"node":{"id":"164cee99-59db-564e-ae2d-20184e5833e3","excerpt":"Webpack (1) 웹팩 기본 본 포스팅의 내용은 생활코딩님의 강의를 들으면서 간단하게 정리한 것입니다. 아주 간단하게 로컬 웹서버를 띄우는 방법 :  설치 후, 로 해당 디렉토리에서 웹서버 실행 가능! webpack-tutorial 폴더에  실행하여 노드 프로젝트로 세팅해주었다. 계기 : 리액트를 CRA없이 하려고 보니, 웹팩이라는 것이 있다는 것을 알게 되었다. 당연하게 생각하였던 과정들에 대한 이해를 통하여 발전할 수 있을 것이다! Why webpack? 많은 파일들이 모여 하나의 웹사이트를 만드는데, 다양한 문제가 발생할 수 있다. 기존 웹서비스의 문제점 1. 다양한 파일에서 충돌에 대응하기 어렵다.  이러고 를 통하여 로컬서버(localhost:8080)에 들어가보면 어떻게 보여질지 예상해보자. word라는 전역 변수는 hello.js에도 있고 world.js에도 존재하므로(confict 발생) 더 뒤에 선언된 world.js의 word로 덮어씌우기 될 것이다.  여러 …","fields":{"slug":"/FE-Webpack-1/"},"frontmatter":{"categories":"FE","title":"(FE) Webpack (1) 웹팩 기본","date":"January 12, 2022"}},"next":{"fields":{"slug":"/DS05-Heap/"}},"previous":{"fields":{"slug":"/FE-Webpack-2/"}}},{"node":{"id":"8b6696db-6098-577e-8a21-f90d144ae266","excerpt":"결론 복사 : 내용은 완전히 같지만, 주소는 완전히 다른 사본을 만들어내는 것 : 원본과 참조 공유가 있어 상황에 따라 문제가 생길 수 있는 복사, depth가 1인 복사 : 내용만 같고 모든 원소의 주소는 달라 원본과 완전히 독립된 복사 복사 판단방법 즉, 모든 원소의 내용은 같으면서 ===의 결과가 false가 나와야(다른 주소를 참조, 원본과 독립되어있다는 의미) 깊은 복사가 된 것이다. 같은 방법을 통하여 복사를 했더라도 객체의 깊이에 따라 얕은 복사가 될 수도, 깊은 복사가 될 수도 있다! 계기 React.js에서 state(상태)를 다루다보면 이라는 속성이 굉장히 중요 하게 여겨진다. 리액트에서 불변성이란, 기존의 값을 직접 수정하지 않으면서 새로운 값을 만들어 내는 것을 의미한다. 새로운 값이라는 것은 원본과는 완전히 독립된 사본에서 변형이 이루어진 데이터이며, 이를 위해 깊은 복사의 개념을 익힐 필요를 느끼게 되었다. 사전 지식 Primitive type과 Refer…","fields":{"slug":"/FE-JS-copy/"},"frontmatter":{"categories":"FE","title":"(JS) 얕은복사와 깊은복사(shallow and deep copy) & aliasing","date":"October 24, 2021"}},"next":{"fields":{"slug":"/FE-React-hooks-2/"}},"previous":{"fields":{"slug":"/DS04-Tree/"}}},{"node":{"id":"ffd441a4-4019-57eb-90de-dea9ed0004e3","excerpt":"(React) Hooks (2) useCallback, useMemo 나는 여태까지 useState와 useEffect로만 모든 프로젝트를 진행하였다. 이제 기능구현은 되니까 성능 최적화를 해보도록 하자! useEffect는 특정 조건(변수의 값이 바뀌거나 마운트, 언마운트 되었을 때)에 일어날 행동들(side effects)을 수행하는 Hook이다. useCallback은 함수를 memoization시켜놓아 모든 렌더링 시 함수가 재실행되지 않고, 특정 조건시에만 함수를 반환하여 실행도록 한다. useMemo는 변수를 ~~ 배열인자에 들어있는 의존성이 바뀌었을때 실행되는 것은 같지만, useEffect는 안의 내용이 실행되고, useMemo는 안의 변수를 반환하고 useCallback은 안의 함수를 반환한다.","fields":{"slug":"/FE-React-hooks-2/"},"frontmatter":{"categories":"FE","title":"(React) Hooks (2) useCallback, useMemo","date":"October 22, 2021"}},"next":{"fields":{"slug":"/FE-React-hooks-1/"}},"previous":{"fields":{"slug":"/FE-JS-copy/"}}},{"node":{"id":"5ad2aee6-9e68-5a85-9917-d2af9e38d633","excerpt":"(React) Hooks (1) useState, useEffect Hooks는 함수형 컴포넌트에서 다양한 작업을 할 수 있도록 도와주는 함수이다. 기존에는 class형 컴포넌트에서만 가능했던 기능을 hook을 통하여 functional component에서 사용가능하게 되었으며, 로직을 재사용할 수 있게 되었고, 코드의 이해도를 높일 수 있게 되었다. 보통 hook은 , 와 같이 use~로 시작하는 경우가 많고, 리액트에서 제공하는 hook\n뿐만 아니라 customized 하여 사용할 수도 있다. 그 중 가장 기본적인 훅인 와 에 대하여 알아보자. useState 함수형 컴포넌트에서 state(상태)를 바꿔줄 수 있도록 하는 가장 기본적인 Hook이다. 의 인자로는 해당 state의 초깃값을 넣어주며, 로 구성된 배열을 반환한다. useState 사용법 우선 useState를 import하고 사용해야 한다. 다음 예제를 보도록 하자! 를 보면 value라는 이름을 갖고 초깃값이 …","fields":{"slug":"/FE-React-hooks-1/"},"frontmatter":{"categories":"FE","title":"(React) Hooks (1) useState, useEffect","date":"October 12, 2021"}},"next":{"fields":{"slug":"/DS03-ADT/"}},"previous":{"fields":{"slug":"/FE-React-hooks-2/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}