{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/OS",
    "result": {"pageContext":{"currentCategory":"OS","categories":["All","OS","BE","FE","WEB","블로그","Alg","ADsP","Algorithms"],"edges":[{"node":{"id":"a8425bb2-6f5d-5eac-bccb-ceb12e551d10","excerpt":"Process Process는 실행중인 프로그램(running program)으로 정의할 수 있다. 반면에 프로그램은 디스크 상에 존재하며 실행을 위한 명령어와 정적 데이터의 묶음이다. 운영체제는 하나의 프로세스가 하나의 CPU를 점유하는 것처럼 보이도록 을 만들어, 여러 프로그램이 동시에 실행되는 illusion을 만들어준다. 짧은 시간으로 나누어 여러 Process를 수행하도록 하는 방법을 이라고 하며, 이를 구현하기 위해 운영체제는 저수준의 메커니즘인 부터, 고수준의 scheduling과 같은 까지 갖고 있다.","fields":{"slug":"/OS(3)-Process&Thread/"},"frontmatter":{"categories":"OS","title":"(OS) 운영체제 복습 [3. Process & Thread]","date":"June 28, 2023"}},"next":{"fields":{"slug":"/OS(2)-computer-architecture/"}},"previous":null},{"node":{"id":"328e4644-a010-5a01-a36b-43fec5db2009","excerpt":"운영체제에 앞서 컴퓨터 구조를 한번 복습하고 가보자! Von Neumann Architecture 폰 노이만 구조 컴퓨터 프로그램은 많은 명령어들로 구성되어 있으며, 명령어들은 각각 로부터 fetch, decode, execute, writeback의 과정을 거치며, 이는 프로그램이 종료될 때까지 수행된다. 명령어들은 에 올라가(load)있어야하며, CPU는  레지스터를 통해 명령어를 가져오고, 그 뒤의 과정을 거치게 된다. CPU, memory와 같은 device들은 서로 bus(역할에 따라 data, control, address bus 존재)를 통해서 연결되어 있다. 이러한 형식으로 프로그램만 바꾸어가며 메모리에 (버스를 통해) 적재된 후 실행할 수 있는 구조를 라고 한다. 이는 현대의 컴퓨터 구조의 기반이 된다. 프로그램은 실행되기 위해 ‘파일’의 형태로 저장장치에 저장되지만, 이를 실제 실행하기 위해서는 메모리에 로드가 되어야 한다는 것을 알 필요가 있다. CPU Cent…","fields":{"slug":"/OS(2)-computer-architecture/"},"frontmatter":{"categories":"OS","title":"(OS) 운영체제 복습 [2. 컴퓨터 구조 skim]","date":"June 27, 2023"}},"next":{"fields":{"slug":"/OS(1)-intro/"}},"previous":{"fields":{"slug":"/OS(3)-Process&Thread/"}}},{"node":{"id":"022c18c1-b2d0-5e01-bc62-931440b696f2","excerpt":"운영체제란? OS Operating System 운영체제가 없는 컴퓨터도 존재할 수 있지만, 문구점에서 살 수 있는 계산기와 같이 고정된 기능만 수행할 수 있을 것이다. Programmable한 기계에는 운영체제가 필요할 것이다..! 운영체제는 프로그램들이 실행되고, 사용자와 상호작용하기 위해 자원을 효율적으로 관리하거나, 자원을 보호하는 역할을 수행하는 소프트웨어이다. 운영체제는 자원을 어떻게 관리하고 보호할까? OS는 physical(cpu, memory, HDD 등 모든 장치)에 대하여 사용자가 직접 접근할 수 없도록 한다. 이러한 자원에 접근할 수 있는 를 통하여 사용자가 자원에 정해진 방법으로 접근할 수 있도록 제공한다. 이러한 역할을 (가상화)라고 하며, OS를 virtural machine으로 보는 견해도 존재한다. 자동차를 보면, 사용자가 엔진을 직접 제어한다기 보다는 엑셀과 기어 등으로(정해진 방법을 통해서) 엔진을 컨트롤하고 엔진을 직접 보는 것이 아닌 계기판을 …","fields":{"slug":"/OS(1)-intro/"},"frontmatter":{"categories":"OS","title":"(OS) 운영체제 복습 [1. 운영체제의 개요]","date":"June 26, 2023"}},"next":{"fields":{"slug":"/Django(12)- nested model & serializer/"}},"previous":{"fields":{"slug":"/OS(2)-computer-architecture/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}