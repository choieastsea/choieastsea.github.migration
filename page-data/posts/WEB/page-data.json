{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/WEB",
    "result": {"pageContext":{"currentCategory":"WEB","categories":["All","WEB","Alg","BE","OS","FE","블로그","ADsP"],"edges":[{"node":{"id":"2197d178-4869-524d-92fd-c5d919db41c0","excerpt":"저번까지는 를 이용하여 서버사이드의 jwt 토큰 로직을 구현해보았다. 로직 자체를 이해한다면 나 다른 프레임워크에도 참고하여 적용이 가능할 것이다. 오늘은 프론트에서 해줘야할 것들을 위주로 구현해보자.! 의 를 이용하여 구현할 예정이고, 클라이언트에서는 access token에 대한 흐름을 위주로 생각하면 좋을 것이다. 이 프로젝트에서 사용된 라이브러리는 다음과 같다. recoil : context value를 저장하기 위하여 사용한다 axios : fetch api를 이용하고 이를 모듈화하기 위해 사용한다 react에서 해줘야 할 것들 몇가지만 기억하자. 로그인 성공시, access token은 context 변수로 갖고 있도록 한다. 이 필요한 요청에 대하여 access token을 실어서 보낸다. 만약, access token이 만료되거나(401) 없다면 refresh token을 이용하여 재발급 받는다. access token을 재발급 받았다면 그것을 Bearer에 실어서 …","fields":{"slug":"/WEB-jwt(3)/"},"frontmatter":{"categories":"WEB","title":"(WEB) JWT token 인증 도입하기 (3)","date":"October 14, 2023"}},"next":{"fields":{"slug":"/Alg-BOJ-4803/"}},"previous":null},{"node":{"id":"a26f7892-88be-58c2-9916-889cabcf5f72","excerpt":"오늘은 jwt token을 구현해보는 날이다. 서버와 클라이언트 모두 구현하므로, 개념만 챙겨가도 좋을 것이다! 우선 서버부터 구현하는 것이 편하다. 에서는 /docs url을 통한 로 거의 모든 테스트가 가능하므로 편하다. 참고로 fast api서버는 8000번, react는 3000번 포트에서 테스트하였다. Fastapi에서 해줘야 할 것들 공식문서가 매우 친절한 fast api에  인증과 관련한 문서와 모듈들이 제공된다. 공식문서에서는 만 있어 이를 응용하여 을 만들어볼 수 있다. 추가적으로, refresh token은 response header를 통하여 로 전달하며, access token 은 response body를 통하여 bearer 토큰을 SPA의 variable로 갖고 있을 수 있도록 전달해주면 된다. 옵션 (CORS & credentials) 클라이언트는 3000, 서버는 8000번 포트에서 서빙되므로 CROSS ORIGIN이다. 이에 대한 설정을 해줄 필요가 …","fields":{"slug":"/WEB-jwt(2)/"},"frontmatter":{"categories":"WEB","title":"(WEB) JWT token 인증 도입하기 (2)","date":"October 06, 2023"}},"next":{"fields":{"slug":"/WEB-jwt(1)/"}},"previous":{"fields":{"slug":"/Alg-BOJ-4803/"}}},{"node":{"id":"95803260-6ccb-5ee5-ae7d-48838ab64da9","excerpt":"프로젝트에서 jwt를 이용한 인증 절차를 도입한 경험을 정리해보며 글을 작성한다. 기본적인 authentication, authorization의 흐름(클라이언트, 서버)은 이해하고 보는 것이 편할 것이다. JWT (JSON Web Token)은 JSON기반의 토큰으로, 토큰을 서버의 특정 key로 암호화하여 사이트에서 사용자를 인증하는데 사용될 수 있다. JWT는 보통 로 인코딩 되어 있으므로 디코딩하면 안의 값을 확인할 수 있다. 아래와 같은 사이트에서도 확인할 수 있고, 사용하는 언어의 내장함수를 이용하여 보통 JWT값의 해석이 가능하다.  이렇게 내용이 다 나오지만 비교적 안전하게 사용할 수 있는 방법이 있으니 공부해보도록 하자. 구성 JWT는 .(dot)을 기준으로 header, payload, signature로 구성되어 있다. header alg 해당 토큰을 암호화할 알고리즘에 대한 내용을 담고 있다. 보통 , 과 같은 해싱 함수를 이용한다. 해당 알고리즘을 이용하여 …","fields":{"slug":"/WEB-jwt(1)/"},"frontmatter":{"categories":"WEB","title":"(WEB) JWT token 인증 도입하기 (1)","date":"October 05, 2023"}},"next":{"fields":{"slug":"/Alg-BT/"}},"previous":{"fields":{"slug":"/WEB-jwt(2)/"}}},{"node":{"id":"7a33879a-a69c-5e3b-9ee1-0859c7893692","excerpt":"progress bar는 로딩중인 화면을 보여줄 때 사용되는데, 진행도에 따른 비율(%)을 보여주는 progress bar를 구현하기 위해서는 세가지 정도의 방법을 생각해볼 수 있다. web socket 통신 server와 client가 양방향 소통을 하며 얼마나 남았는지를 실시간으로 클라이언트에게 제공한다 http 통신 (단순 다운로드의 경우,) http의 Content-Length를 이용하여 총 크기를 알고, 데이터의 chunk가 도착할때 마다 %를 업데이트한다. 서버의 상태를 받아야한다면, long polling 방식도 고려해볼 수 있겠지만 위의 경우 서버가 지속적으로 데이터를 줘야 하는 경우라면 이는 힘들 것이다. SSE(Server Sent Event) 통신 HTML5의 표준 통신으로, 한번의 AJAX 요청에 대하여 서버의 상태를 지속적으로 보낼 수 있는 프로토콜이다. 서버에 의존적이긴 하지만, 서버에서 로딩에 대한 이유를 설명할 때 유용할 것이다. 오늘은 http 기반의…","fields":{"slug":"/progress-event/"},"frontmatter":{"categories":"WEB","title":"HTTP 통신으로 Progress Bar를 구현해보자 (Progress Event)","date":"September 13, 2023"}},"next":{"fields":{"slug":"/Alg-LC-215&373/"}},"previous":{"fields":{"slug":"/Alg-LC-127/"}}},{"node":{"id":"63f88978-7671-5bed-a256-0aebaa0739cb","excerpt":"웹서비스의 기본인 회원가입부터 해보자. nest js로 하려다가 db 구축이 매우 쉽다고 판단되는 (Django Rest Framework)를 이용하여 만들어보려고 한다. 회원가입 시, 서버의 요구사항은 회원들의 정보를 구분되도록, 추가적으로 안전하게 저장하는 것이다. 장고 세팅 장고에 대하여는 이전글을 참고해보자. 나도 생활코딩님의 강의를 보고 약간의 블로그와 공식문서를 읽은 정도의 수준이니 따라올 수 있을 것이다. auth_project/settings.py에서 config(db 세팅) 해준다.  로 member app을 생성해준다.(회원에 대한 모듈)\nls >> auth_project   member  project_env\nsettings.py의 INSTALLED_APPS에 ‘member’ 추가해줘야 이후 만들 model을 인식할 수 있다. auth_project/urls.py 수정 ( 추가)\nmember/urls.py 생성하여 아래와 같이 작성해준다. member/views…","fields":{"slug":"/deploy-2-drf_signup/README/"},"frontmatter":{"categories":"WEB","title":"(배포) 웹서비스 배포하기 (2)(backend)회원가입과 암호화","date":"January 08, 2023"}},"next":{"fields":{"slug":"/DRF_serializer/"}},"previous":{"fields":{"slug":"/FE-JS-type/"}}},{"node":{"id":"bb64831b-04c3-554c-a783-af377795429b","excerpt":"Django를 이용하여 서버를 구축하는 과정에 있어서, model을 설계하고 Serailizer를 이용하여 데이터를 CRUD하면서 헷갈리는 개념을 공부해보았다. 우선, DRF는 설치되어 있어야한다. (가상 환경 만들고, drf project 생성하고, app 생성하고 실행하기) DRF 데이터 흐름 DB ↔ QuerySet/Model ↔ OrderdDict(ReturnDict) ↔ JSON 우리가 사용할 데이터는 보통 DB에 테이블로서 존재하는데, 여기서는 하나의 테이블이 하나의 모델이 될 것이다. DB의 값을 바로 가져와 python 코드레벨에서 사용하는 것은 불가능하고, 위의 과정을 거쳐서 JSON으로 사용할 수 있게 된다. (역으로 JSON 데이터를 DB에 넣거나 수정할 때에도 마찬가지) DRF에서는 model에서 dictionary로 변환하는 과정을 (직렬화,,, 의역하여 객체화.?) 라고 정의하고, dictionary에서 model로 변환하는 과정을 라고 정의한다. DRF에…","fields":{"slug":"/DRF_serializer/"},"frontmatter":{"categories":"WEB","title":"(DRF) Django Rest Framework, Serialize 개념 이해하기","date":"January 03, 2023"}},"next":{"fields":{"slug":"/deploy-1-basic/"}},"previous":{"fields":{"slug":"/deploy-2-drf_signup/README/"}}},{"node":{"id":"b16b8c18-01f9-539f-9955-57e778d6453e","excerpt":"목표 CRA를 이용한  프론트 개발, 와 을 이용한 api 서버 개발 모두 할 줄 안다면, 이제 배포를 해볼 차례이다.! 배포까지 해보아야 웹 서비스가 어떤 식으로 구성되는지 알 수 있을 것 같아서 공부해보았고, 그 기록을 남기고자 한다. 목표는 다음과 같다. 클라우드 환경을 이용하여 웹서비스(풀스택) 배포하기 회원제 웹 서비스 풀스택으로 구현하기 docker 이용하여 배포 환경 구축하기 (optional) 도메인 구입해서 쉽게 접속하기 Web Service Architecture 출처: https://fractalideas.com/blog/making-react-and-django-play-well-together/ asdf 크게 4가지 방법이 있고, 각각에 대하여 이해해보자. 두개(front, api)의 서버를 두는 구조이다. client가 브라우저를 통하여 url(app.example.com)을 입력하면, front-server에서 이를 처리하여 html, css, js 파일…","fields":{"slug":"/deploy-1-basic/"},"frontmatter":{"categories":"WEB","title":"(배포) 웹서비스 배포하기 (1) 서비스 아키텍쳐","date":"December 30, 2022"}},"next":{"fields":{"slug":"/mac-setup-openmp/"}},"previous":{"fields":{"slug":"/DRF_serializer/"}}},{"node":{"id":"f6ef8e8f-999b-58d3-89ab-bab4c4f24f10","excerpt":"Web service with JavaScript(React and Express Js) + MySQL 자바스크립트로 프론트와 백엔드를 모두 구축해보며 웹서비스에 대한 전반적인 이해도를 높여보자! 개발 환경 아직 번들러를 다룰 줄 모르기에 간단하게 CRA로 웹서버를 구축해보았다. SQL도 할 줄 모르지만, 이 기회에 하면서 배워보도록 하자! React.js with Create React App () https://create-react-app.dev/ 을 참고한다. Express.js Node.js 기반의 웹 서버를 구축할 수 있도록 만들어진 framework로 순수 Node.js로 서버를 구축하는 것보다 훨씬 편한 기능을 제공한다. MySQL 관계형 DBMS로, SQL 쿼리를 통하여 데이터를 가져온다. api를 통하여 웹서버와 연동되어 CRUD를 수행하게 될 것이다. 설치 환경 node js & npm 와 로 확인 가능 MySQL 설치되었다면 로 MySQL server 실행 가…","fields":{"slug":"/full-stack-in-js/"},"frontmatter":{"categories":"WEB","title":"(WEB) 자바스크립트로 풀스택 환경 구축하기(feat mysql2)","date":"February 17, 2022"}},"next":{"fields":{"slug":"/ADsP-3-(2)-2/"}},"previous":{"fields":{"slug":"/Alg-BOJ-11279/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}