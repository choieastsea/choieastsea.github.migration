{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Alg",
    "result": {"pageContext":{"currentCategory":"Alg","categories":["All","Alg","ADsP","FE","WEB","블로그","Algorithms"],"edges":[{"node":{"id":"1de6e147-8e82-5142-b9e2-6e4be57b9121","excerpt":"자료구조를 다시 공부하면서 정리하고 있다. 코드보다는 아이디어를 위주로 작성할 예정이다! 언어와 문법에 큰 신경을 쓰지 않지만, c++을 중심으로 코딩할 예정이다. 수학적 귀납법 컴퓨터에서 많은 알고리즘들은 수학적 귀납법과 귀류법 등을 이용하여 정확하다고 증명할 수 있는데, 수학적 귀납법은 다음과 같다. BASE : P(1)이 참이다. STEP : P(n-1) -> P(n)이 참이다. 따라서, 모든 자연수 n에 대하여 P(n)은 참이다. BASE와 STEP이 참임을 보이면 해당 함수는 모든 자연수에서 성립한다고 볼 수 있다. step에서의 핵심은 P(n-1)이 참이라고 믿는 것인데, 이유는 무엇일까. P->Q의 의미 예를 들어, 100점을 맞으면(P) 치킨을 사준다(Q)는 약속이 있고, 경우에 따라 이 약속이 참인지 거짓인지(약속을 지켰는지 안지켰는지) 생각해보자. 100점을 맞고, 치킨을 사주었다. => 참 100점을 맞고, 치킨을 안사주었다. => 거짓 100점을 안맞았고, 치…","fields":{"slug":"/CDS00-array/"},"frontmatter":{"categories":"Alg","title":"(DS) 자료구조 정리 01- 수학적 귀납법, 배열, 재귀, merge sort","date":"July 01, 2022"}},"next":{"fields":{"slug":"/Alg-Dijkstra/"}},"previous":null},{"node":{"id":"e1e5d260-58e0-58af-a974-6c589aef1c8d","excerpt":"Dijkstra(다익스트라) Algorithm은 그래프에서, 한 노드에서 출발하여 다른 노드로 가는 최단 거리를 구할 때 사용할 수 있는 알고리즘이다. 더 나아가, 출발해서 도착할 때까지의 최단 경로를 구할 수도 있다. 문제 설명 input : 첫줄에는 노드갯수와 엣지갯수, 두번째줄부터 엣지 정보(노드 번호 두개와 edge weight) output : 1번노드에서 n번노드까지의 최단 거리 ​\t(입력 예시) 그래프를 표현하는 방법 weighted graph를 표현하는 방법은 크게 두가지로 나눠볼 수 있는데, 노드~노드간의 관계이므로, 노드가 n개일때 n*n matrix를 만들고, cell에 weight를 적는다. 4번 노드와 3번 노드를 잇는 엣지의 길이가 5이면, 와 같이 표현하면 된다. 다만, 이는 두 노드를 잇는 여러 엣지가 존재할 때 구조의 변경이 불가피하다. 한 노드에 인접한 노드에 대하여 (weight, 노드번호)를 모든 노드마다 갖도록 한다. (노드번호, weight)…","fields":{"slug":"/Alg-Dijkstra/"},"frontmatter":{"categories":"Alg","title":"(Alg) 그래프 알고리즘 - Dijkstra와 최단 경로 출력","date":"May 28, 2022"}},"next":{"fields":{"slug":"/ADsP-Review/"}},"previous":{"fields":{"slug":"/CDS00-array/"}}},{"node":{"id":"a31e2810-4fcd-59b5-a65f-0bd325e9597f","excerpt":"Greedy 알고리즘의 개념에 대하여 익히고, 문제를 몇개 풀어보는 시간을 가져보자. Greedy란 욕심쟁이기법이라고도 한다. 매 과정에서 최적 선택을 고르고, 이것이 곧 전체의 최적 선택이 되는 것을 의미한다. Greedy 문제의 증명 방법 문제를 greedy하게 풀어야겠다는 생각이 들면, 보통 문제의 제약 조건 안에서 최적의 선택을 수행하면 된다. 뭔가 그렇게 푸는게 맞을거 같은데, 확신하기 어려운(증명하기 어려운) 경우가 종종 발생하는데, 이는 간단하게 귀류적으로 생각하면 된다. A, B, … , C 중에서 현재 가장 최적의 A를 골랐다고 해보자. 만약 A를 선택하지 않고 다른 B나 C를 선택하였을 경우, A를 선택하였을 경우보다 더 좋은 답을 얻지는 못한다는 것을 보이면 된다. 따라서 A를 선택하는 것이 최적이고, 답이라는 결론을 얻을 수 있다. 문제 풀이 codeforces 734B B. Anton and Digits 2,3,5,6이 적혀 있는 카드들이 있을 때, 여기서 …","fields":{"slug":"/Alg-Greedy/"},"frontmatter":{"categories":"Alg","title":"(Alg) Greedy Algorithm. 그리디(탐욕) 기법으로 문제 해결하기","date":"March 19, 2022"}},"next":{"fields":{"slug":"/Alg-Prefix-Sum/"}},"previous":{"fields":{"slug":"/ADsP-Review/"}}},{"node":{"id":"6c91f294-9e28-56aa-b3f8-eb63842f97f9","excerpt":"prefix sum은 자주 등장하는 주제이고, 알고 있으면 매우 유용하다. 개념에 대하여 익히고, 문제를 몇개 풀어보는 시간을 가져보자. Prefix sum 이란 숫자형 데이터로 이루어진 배열에서, 현재까지의 원소들의 합을 의미한다. 예를 들어, a = [1,3,-5,2,7]의 prefix sum array를 구하면 P= [1,4,-1,1,8] 이다. 누적합이라고 보면 편할 것이다! Prefix sum 배열을 앞으로 P라고 부르겠다. prefix sum을 이용하여 구간합 구하기 몇가지의 특징이 있는데, 우선 P의 마지막 원소는 배열 원소의 총합이라는 것이다. 또한 구간의 합을 구할때, P를 이용하여 다음과 같이 구할 수 있다. a[3]~a[7]까지의 합은 P[7]-P[2]와 같다. 굳이 공식화 하자면, summation from a[i] to a[j] = P[j]- P[i-1] 라고 할 수 있겠다. 이는 구간의 합을 O(1)에 구할 수 있는 매우 좋은 방법이다! 물론 초기화하는데 …","fields":{"slug":"/Alg-Prefix-Sum/"},"frontmatter":{"categories":"Alg","title":"(Alg) Prefix Sum 부분합 문제 해결하기","date":"March 14, 2022"}},"next":{"fields":{"slug":"/FE-NextJS-1/"}},"previous":{"fields":{"slug":"/Alg-Greedy/"}}},{"node":{"id":"1ba33787-0d65-5547-85b1-f5f258c16047","excerpt":"이제 백준 문제를 풀어보려고 한다. 최대힙과 관련된 문제이다. 단순하게 최댓값만 뽑아서 리턴해도 되지만, 최대힙을 사용하라해서 문제에 맞게 다시 구현해보았다. 백준에서 JS를 사용하는 방법 백준에서는 node js만 가능하고, 입력을 file system을 통하여 받아야한다. 따라서 기본적으로 모듈의 으로 가져오며 이후에 입력에 따라 재가공하면 된다. 나는 로컬에 stdin.txt파일을 만들어서 테스트한 후 제출하였다. 최대힙 최대힙은 부모 노드의 값이 자식노드의 값보다 크거나 같은 완전이진트리이다. 0번째 인덱스가 인 배열로 자식과 부모간 인덱스 이동이 가능하므로 간단하게 구현 가능하다. 런타임에러가 나서 사례를 검색하였는데, console.log()를 여러번 해주지 말고 버퍼에 넣어놨다가 마지막에 출력만 해주니 해결되었다!","fields":{"slug":"/Alg-BOJ-11279/"},"frontmatter":{"categories":"Alg","title":"(Alg) 백준 11279 최대힙 JS","date":"February 19, 2022"}},"next":{"fields":{"slug":"/full-stack-in-js/"}},"previous":{"fields":{"slug":"/ADsP-3-(3)-1/"}}},{"node":{"id":"f83049d2-462d-55ec-b98f-2ddec347a1a4","excerpt":"Tree의 종류인 Heap에 대하여 알아보도록 하자. Heap (힙)이란  부모노드가 자식노드보다 큰(혹은 작은) 완전 이진 트리를 의미한다. 형제 노드간의 대소관계는 상관없이 오직 부모와 자식관의 대소관계만 보면 된다. 완전이진트리는 마지막 레벨을 제외한 모든 노드가 가득차있고, 마지막 레벨은 왼쪽부터 순서대로 채워져 있는 이진트리이다. 부모가 자식보다 큰 힙을 , 부모가 자식보다 작은 힙을 이라고 한다. 최대힙의 경우 모든 노드의 값 중 최댓값이 루트 노드로 오게 되며, 최소힙은 최솟값이 루트노드로 오게 되는 것이 자명하다. 이러한 힙의 속성을 이용하여 루트 노드를 반복적으로 하는 (힙 정렬)을 구현할 수 있다. 또한 우선순위에 따라 선순선출(?)이 되는(우선순위 큐) 추상자료형을 구현할 수 있다. 완전 이진 트리 구현 우선 힙의 구조적인 형태는 Complete Binary Tree(완전 이진 트리)이다. 이는 이전 게시글과 같이 노드간의 레퍼런스로 구현할 수도 있지만, 배열로…","fields":{"slug":"/DS05-Heap/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) Heap","date":"November 15, 2021"}},"next":{"fields":{"slug":"/DS04-Tree/"}},"previous":{"fields":{"slug":"/FE-Webpack-1/"}}},{"node":{"id":"19b36e89-13e5-59ef-85e9-e9ac1c6d5531","excerpt":"(트리)는 계층적인 구조를 나타내기 위한 자료구조이다. 나무를 뒤집어 놓은 듯한 구조로 보통 표현되며, 뿌리인 root node에서부터 자식 노드로 단방향으로 뻗어져 나간다. 파일 디렉토리가 트리의 경로와 같이 표현되어 있으며 (ex C>>Desktop>>Document>>index.md), ,   등에도 사용된다. 트리 위키백과 Tree 용어  root(루트) : 최상위 계층에 있는 노드. 한 트리에서 루트 노드는 유일하게 존재한다. level(레벨) : 루트에서 특정노드까지의 거리(엣지의 수) parent/child node(부모-자식 노드) : 한 노드와 직접 연결되어 있는 경우, 부모 자식 노드의 관계이다. 가리키는 노드가 부모, 아닌 노드가 자식 노드라고 보면 된다. sibing nodes(형재 노드) : 같은 부모 노드를 갖는 노드 height(높이) : 트리의 높이 ==  sub tree(서브 트리) : 한 노드를 기준으로 하는 트리. 트리를 재귀적으로 볼 수 있게 해…","fields":{"slug":"/DS04-Tree/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS)트리와 이진트리 탐색 Tree & Binary Tree traverse","date":"November 05, 2021"}},"next":{"fields":{"slug":"/FE-JS-copy/"}},"previous":{"fields":{"slug":"/DS05-Heap/"}}},{"node":{"id":"1f5b55d1-79b3-570b-83ef-83ed55f01a39","excerpt":"추상자료형에 대하여 공부해보고, stack과 queue에 대하여 알아보자. Abstract Data Type(ADT, 추상자료형) 스택은이다. 추상자료형은 자료구조를 추상화한 것으로, 구현보다는 기능에만 초점을 맞춘다. 를 배울 때 에 대하여 배운 적이 있을텐데, 이는 실제 구현된 것이 아니고 기능에 대한 메서드만 명시되어 있다. 이를 implement한 클래스가 정해놓은 기능을 구현하는 방식으로 되어있다. list, set, dictionary, stack, queue는 모두 추상자료형으로 정해진 기능만을 담고 있으며 다양한 방법으로 구현될 수 있다. 예를 들어 스택은 다양하게 구현할 수 있지만, 우리는 array를 이용하여 직접 구현해볼 것이다. Stack이란 Stack(스택)은 메모리의 끝에서만 operation이 이루어지는 선형 자료구조로, 차곡차곡 쌓아올린 형태를 생각하면 이해하기 편하다.  (물론 메모리가 저렇게 생기지는 않았을 것이다. 단지 스택을 그릴때 저렇게 표현한…","fields":{"slug":"/DS03-ADT/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS)ADT 추상자료형 - Stack & Queue","date":"October 09, 2021"}},"next":{"fields":{"slug":"/DS02-LinkedList/"}},"previous":{"fields":{"slug":"/FE-React-hooks-1/"}}},{"node":{"id":"d2a012e0-3dba-5c82-b90f-2a0682b200c8","excerpt":"LinkedList란 LinkedList(연결리스트)는 리스트라는 추상자료형을 구현하는 선형 자료구조 중 하나로, 끼리 참조를 통하여 연결되어 선형적인 형태를 이루고 있는 자료구조이다. Array는 크기가 정해져 있고 메모리에서 연속적으로 존재하였지만, 링크드 리스트는 각 노드에 데이터가 저장되어 있으며 이웃한 노드의 정보(주소)를 가리키고 있는 형태로 여러 데이터를 저장한다.  간단하게 위의 그림으로 Array와 LinkedList를 비교해볼 수 있다. 연결리스트에서는 데이터가 노드에 저장되며, 노드끼리의 연결관계가 존재한다. 또한 head와 tail은 각각 처음과 마지막 노드를 가리키고 있어 모든 노드에 접근할 수 있게 되는 것이다. 따라서 각 노드는 메모리상에서 연속적으로 존재할 필요가 없으며, 데이터의 자료형이 같을 필요도 없을 것이다. LinkedList 구현 요구 사항 LinkedList에서는 배열과 다르게 데이터를 에서 갖고 있도록 한다. 노드는 데이터를 갖고 있으며,…","fields":{"slug":"/DS02-LinkedList/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) LinkedList","date":"October 04, 2021"}},"next":{"fields":{"slug":"/DS01-ArrayList/"}},"previous":{"fields":{"slug":"/DS03-ADT/"}}},{"node":{"id":"85417fbe-3e19-5b0b-a846-28bfdfe681cb","excerpt":"언어마다 다른 자료구조 JavaScript의 Array의 MDN 설명을 보면 다음과 같다. 배열은 프로토타입으로 탐색과 변형 작업을 수행하는 메서드를 갖는, 리스트와 비슷한 객체입니다. JavaScript에서 배열의 길이와 요소의 자료형은 고정되어 있지 않습니다. 배열의 길이가 언제든지 늘어나거나 줄어들 수 있기 때문에 JavaScript 배열들은 밀집도가 보장되지 않습니다. JS의 Array는 key가 int type index인 이다. 배열은 length라는 특별한 프로퍼티를 갖고 있으며, 이와 관련된 함수가 제공된다. 배열의 길이는 정해져 있지 않으며 각 원소의 크기 또한 정해져 있지 않다. 메모리상에서 연속된 형식으로 저장되어 있다고 보장을 못하는 이다. C, Java의 Array는 크기와 타입이 정해져 있는 **정적배열(static array)**이다. 따라서 선언시에 메모리 공간이 할당되며 모든 원소의 타입이 고정되어 있다. 크기가 정해져 있으므로 요소의 삽입과 삭제가 …","fields":{"slug":"/DS01-ArrayList/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) ArrayList","date":"September 12, 2021"}},"next":{"fields":{"slug":"/how-to-md/"}},"previous":{"fields":{"slug":"/DS02-LinkedList/"}}},{"node":{"id":"ecfecc2e-61ee-57a4-a949-6cb53e7fa025","excerpt":"자료구조 도서관에서 책을 찾을 때를 생각해보자. 만약 ‘로미오와 줄리엣’책을 찾는다면,  순으로 찾는다. 도서관에서 책을 찾을 수 있는 이유는 도서관에서 일정한 기준으로 책을 구조화하였기 때문이다. 일정한 약속대로 짜여진 구조가 있으므로 누구나 원하는 책을 찾을 수 있게 된다.\n컴퓨터에 데이터를 저장할 때에도 일정한 구조에 맞게 데이터를 저장한다. 우리는 이를 라고 한다. 도서관의 책을 ‘출판일자’순으로 배치하였다면 우리는 찾기 힘들 것이다. 이와 같이 각 자료구조에는 더 나은(빠르고 편한) 방법이 존재할 수 있다. 데이터를 저장하고 관리하기 위해 사용하는 구조 자료구조는 데이터의 효율적인 접근 및 조작을 가능하게 해주는 저장 및 관리 방식이라고 볼 수 있다.\n우리는 상황에 따라 최선의 자료구조 선택을 통하여 효율적인 프로그램을 짤 수 있을 것이다! 자료구조의 종류  향후 학습 방향 상황에 따라 더 맞는 자료구조가 있으며, 우리는 이를 성능(시간, 공간 복잡도)으로 판단할 수 있어…","fields":{"slug":"/DS00-start/"},"frontmatter":{"categories":"Algorithms","title":"(자료구조 JS) 자료구조 시작","date":"September 03, 2021"}},"next":{"fields":{"slug":"/first-post/"}},"previous":{"fields":{"slug":"/how-to-md/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}