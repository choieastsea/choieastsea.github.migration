{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Alg-LC-219/",
    "result": {"data":{"cur":{"id":"09f2600a-238d-539b-a6cb-12be5be29d44","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>중복된 숫자의 위치(인덱스) 차이가 k이하인지 여부를 반환하는 문제이다. <a href=\"https://leetcode.com/problems/contains-duplicate-ii/\">링크</a></p>\n<p>하나라도 k 이하인 것이 있다면 true를 반환한다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>배열을 선형 탐색하며 python dict에 값을 key, 위치를 value로 넣어주면 된다.</p>\n<p>해당 key가 이미 있다면, 기존 value와 현재 위치를 비교하고, k 이하라면 다음 탐색을 위하여 value를 업데이트해준다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n)</p>\n<p>배열을 선형탐색하면서 dict에 값이 있는지 여부를 확인하고 값을 업데이트하거나 넣어준다. dict의 경우 접근이 O(1)이기 때문이다.</p>\n</li>\n<li>\n<p>Space complexity: O(n)</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">containsNearbyDuplicate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        중복된 값의 인덱스 차이가 k이상인 것이 있다면 return true\n        \"\"\"</span>\n        <span class=\"token builtin\">hash</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 중복 있으니, k차이 이하인지 확인</span>\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token builtin\">hash</span><span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<p>dict의 get 연산은 key error를 발생시키지 않아 try catch로 감싸지 않을 수 있고, O(1)에 실행가능하다. 또한, value의 차이는 절댓값을 계산하는 abs함수를 이용하여 계산할 수 있다.</p>","excerpt":"Intuition 중복된 숫자의 위치(인덱스) 차이가 k이하인지 여부를 반환하는 문제이다. 링크 하나라도 k 이하인 것이 있다면 true를 반환한다. Approach 배열을 선형 탐색하며 python dict에 값을 key, 위치를 value로 넣어주면 된다. 해당 key가 이미 있다면, 기존 value와 현재 위치를 비교하고, k 이하라면 다음 탐색을 위하여 value를 업데이트해준다. Complexity Time complexity: O(n) 배열을 선형탐색하면서 dict에 값이 있는지 여부를 확인하고 값을 업데이트하거나 넣어준다. dict의 경우 접근이 O(1)이기 때문이다. Space complexity: O(n) Code dict의 get 연산은 key error를 발생시키지 않아 try catch로 감싸지 않을 수 있고, O(1)에 실행가능하다. 또한, value의 차이는 절댓값을 계산하는 abs함수를 이용하여 계산할 수 있다.","frontmatter":{"date":"August 28, 2023","title":"(Alg) LeetCode Top Interview 150 - 219. Contains Duplicate II","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-219/"}},"next":{"id":"b207f215-d203-5091-b441-0dc404142c60","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>정렬된 두개의 Singly Linked List를 하나로 merge하는 문제이다. <a href=\"https://leetcode.com/problems/merge-two-sorted-lists/\">링크</a></p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>둘 중 하나가 빈 배열이라면, 나머지를 그대로 리턴한다.</p>\n<p>둘 다 원소가 있는 링크드 리스트라면, 더 작은 원소를 붙이고, 더 작은 원소가 있던 링크드 리스트는 다음 노드를 가리키도록 갱신한다. 이를 반복한다.</p>\n<p>반복문 이후에 원소가 존재하는 리스트가 남아있다면, 결과 리스트에 이어붙여서 리턴해준다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n+m) => n,m 은 각각 두 링크드 리스트의 크기</p>\n</li>\n<li>\n<p>Space complexity: O(1)</p>\n<p>기존 LinkedList를 head와 current를 이용하여 가리키도록 하였으므로, 공간복잡도는 크기에 따라 달라지지 않을 것이다.</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> list1 <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> list2\n        <span class=\"token keyword\">elif</span> list2 <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> list1\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># merge into sorted array</span>\n            <span class=\"token keyword\">if</span> list1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> list2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> list1\n                list1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> list2\n                list2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            current <span class=\"token operator\">=</span> head\n            <span class=\"token keyword\">while</span> list1 <span class=\"token keyword\">and</span> list2<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> list1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> list2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># list1이 다음으로 연결되는 경우</span>\n                    current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> list1\n                    list1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> list2\n                    list2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token comment\"># list가 남아있는 경우, current에 이어 붙여줌</span>\n            <span class=\"token keyword\">if</span> list1<span class=\"token punctuation\">:</span>\n                current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> list1\n            <span class=\"token keyword\">elif</span> list2<span class=\"token punctuation\">:</span>\n                current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> list2\n            <span class=\"token keyword\">return</span> head</code></pre></div>\n<p>결과 linkedlist는 head에서부터 시작한다. 그리고 루프를 돌며 list1와 list2 중 더 작은 값을 current에 이어주면 된다.</p>","frontmatter":{"date":"August 28, 2023","title":"(Alg) LeetCode Top Interview 150 - 21. Merge Two Sorted Lists","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-21/"}},"prev":{"id":"6d3838d9-493d-5c76-9a54-a6ec6a49a57f","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>Singly Linked List(next만 존재)로 십진수 숫자를 표현할 때, 두 숫자를 더한 결과를 Linked List로 리턴하는 문제이다. <a href=\"https://leetcode.com/problems/add-two-numbers\">링크</a></p>\n<p>주의할 점으로는, 숫자는 작은 자리부터 거꾸로 표현이 되어있다는 것이다. 예를 들어, 123은 3->2->1로 표현되어 있다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>컴퓨터 구조에서 배운 가산기와 비슷하게 더하기 연산을 구현해볼 수 있다. 올림이 발생하는 경우에 다음 자릿수로 1을 넘겨주면 된다. 이를 재귀적으로 수행하면 될 것이다.</p>\n<p>추가적으로 두 list의 길이가 다른 경우에도 고려해야하는데, 더 짧은 list의 경우에는 더할 것이 없기 때문에 0으로 처리하였다. 짧은 리스트의 값이 남아있지 않더라도 올림수가 있을 수 있으므로, 위의 연산은 끝까지 수행해줘야한다.</p>\n<p>더 긴 리스트 끝까지 수행했을 때에도 올림수가 남아있다면 (ex 9999 + 1 => <u>1</u>0000) 1을 추가적으로 1을 연결해주는 작업도 필요할 것이다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(max(n,m)) => n,m 은 각각 두 링크드 리스트의 크기</p>\n</li>\n<li>\n<p>Space complexity: O(max(n,m))</p>\n<p>새로운 링크드 리스트는 두 배열의 크기정도이다. 결과 리스트의 각 원소들은 더한 값으로 새로 만들어지므로 별도의 공간이 필요하다.</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, next=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.next = next</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        up <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        current <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> l1 <span class=\"token keyword\">or</span> l2<span class=\"token punctuation\">:</span>\n            val1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token keyword\">if</span> l1 <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n            val2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>val <span class=\"token keyword\">if</span> l2 <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n            val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val1 <span class=\"token operator\">+</span> val2 <span class=\"token operator\">+</span> up<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span>\n            up <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val1 <span class=\"token operator\">+</span> val2 <span class=\"token operator\">+</span> up<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">10</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>val1<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> up<span class=\"token punctuation\">)</span>\n            new_node <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> head <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                head <span class=\"token operator\">=</span> new_node\n                current <span class=\"token operator\">=</span> head\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 기존 링크드 리스트에 추가</span>\n                current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> l1 <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n            l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">if</span> l2 <span class=\"token keyword\">else</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> up <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 마지막 하나 남은 경우</span>\n            current<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> head</code></pre></div>\n<p>주의할 점으로는, 배열의 값이 없는 경우 <code class=\"language-text\">val1 = l1.val if l1 else 0</code>과 같이 판단하였는데 <code class=\"language-text\">val1 = l1.val if l1.val else 0</code>로 하면 NoneType에서의 접근 에러가 나오므로 l1자체가 NoneType인지를 판단해야한다.</p>","frontmatter":{"date":"August 28, 2023","title":"(Alg) LeetCode Top Interview 150 - 2. Add Two Numbers","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-2/"}},"site":{"siteMetadata":{"siteUrl":"https://choieastsea.github.io","comments":{"utterances":{"repo":"choieastsea/choieastsea.github.io"}}}}},"pageContext":{"slug":"/Alg-LC-219/","nextSlug":"/Alg-LC-21/","prevSlug":"/Alg-LC-2/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}