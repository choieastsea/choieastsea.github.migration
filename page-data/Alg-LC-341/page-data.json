{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Alg-LC-341/",
    "result": {"data":{"cur":{"id":"1a10fb82-bb73-5a84-a9e0-959856b67ec6","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p><code class=\"language-text\">NestedInteger</code> 자료형이 주어지고 NestedInteger의 List가 들어올 때, 이를 1차원 vector로 flatten한 배열을 만들어주는 <code class=\"language-text\">NestedIterator</code> 클래스를 구현하는 문제이다. <a href=\"https://leetcode.com/problems/flatten-nested-list-iterator/\">링크</a></p>\n<p>NestedInteger 는 아래와 인터페이스만 제공된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NestedInteger</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n       <span class=\"token triple-quoted-string string\">\"\"\"\n       @return True if this NestedInteger holds a single integer, rather than a nested list.\n       \"\"\"</span>\n\n   <span class=\"token keyword\">def</span> <span class=\"token function\">getInteger</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n       <span class=\"token triple-quoted-string string\">\"\"\"\n       @return the single integer that this NestedInteger holds, if it holds a single integer\n       Return None if this NestedInteger holds a nested list\n       \"\"\"</span>\n\n   <span class=\"token keyword\">def</span> <span class=\"token function\">getList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>NestedInteger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n       <span class=\"token triple-quoted-string string\">\"\"\"\n       @return the nested list that this NestedInteger holds, if it holds a nested list\n       Return None if this NestedInteger holds a single integer\n       \"\"\"</span></code></pre></div>\n<p>구현해야할 NestedIterator의 함수는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NestedIterator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nestedList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>NestedInteger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n       \n    <span class=\"token keyword\">def</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        \n\n<span class=\"token comment\"># Your NestedIterator object will be instantiated and called as such:</span>\n<span class=\"token comment\"># i, v = NestedIterator(nestedList), []</span>\n<span class=\"token comment\"># while i.hasNext(): v.append(i.next())      </span></code></pre></div>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>init 함수에서 nestedList를 이용하여 <code class=\"language-text\">flattenList</code>를 만들어주고, next index를 가리키는 <code class=\"language-text\">pointer</code>를 구현하는 방법으로 생각해보았다. 그러면 next에서는 pointer의 값을 리턴하고, hasNext는 pointer의 범위를 확인하면 될 것이다.</p>\n<p>flattenList를 만들어주는 과정은 <code class=\"language-text\">DFS</code>를 이용하였다. <code class=\"language-text\">[[1,2,3],[4,[5],6,[7,8],9],[10]]</code>이 들어온다면 <code class=\"language-text\">[1,2,3,4,5,6,7,8,9,10] </code>으로 만들어줘야 하므로 배열인 경우에는 더 깊이 들어가고, 숫자인 경우에는 flattenList에 추가해주면 된다.</p>\n<p>주의할 점으로는 stack을 이용한 DFS의 경우, 역순으로 탐색하게 되므로 reverse를 해주어 스택에 넣어주면 될 것이다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>Time complexity : O(n)</li>\n<li>Space complexity: O(n)</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<p>첫번째 방법의 코드이다. 배열을 두번 순회하며 원소들의 갯수를 세어 값을 정렬한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># \"\"\"</span>\n<span class=\"token comment\"># This is the interface that allows for creating nested lists.</span>\n<span class=\"token comment\"># You should not implement it, or speculate about its implementation</span>\n<span class=\"token comment\"># \"\"\"</span>\n<span class=\"token comment\"># class NestedInteger:</span>\n<span class=\"token comment\">#    def isInteger(self) -> bool:</span>\n<span class=\"token comment\">#        \"\"\"</span>\n<span class=\"token comment\">#        @return True if this NestedInteger holds a single integer, rather than a nested list.</span>\n<span class=\"token comment\">#        \"\"\"</span>\n\n<span class=\"token comment\">#    def getInteger(self) -> int:</span>\n<span class=\"token comment\">#        \"\"\"</span>\n<span class=\"token comment\">#        @return the single integer that this NestedInteger holds, if it holds a single integer</span>\n<span class=\"token comment\">#        Return None if this NestedInteger holds a nested list</span>\n<span class=\"token comment\">#        \"\"\"</span>\n\n<span class=\"token comment\">#    def getList(self) -> [NestedInteger]:</span>\n<span class=\"token comment\">#        \"\"\"</span>\n<span class=\"token comment\">#        @return the nested list that this NestedInteger holds, if it holds a nested list</span>\n<span class=\"token comment\">#        Return None if this NestedInteger holds a single integer</span>\n<span class=\"token comment\">#        \"\"\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NestedIterator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nestedList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>NestedInteger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># flatten nestedList</span>\n        self<span class=\"token punctuation\">.</span>flattenList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> nestedInteger <span class=\"token keyword\">in</span> nestedList<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nestedInteger<span class=\"token punctuation\">.</span>isInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nestedInteger<span class=\"token punctuation\">.</span>getInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># depth first search</span>\n                stack <span class=\"token operator\">=</span> nestedInteger<span class=\"token punctuation\">.</span>getList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n                    currentNestedInteger <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> currentNestedInteger<span class=\"token punctuation\">.</span>isInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>currentNestedInteger<span class=\"token punctuation\">.</span>getInteger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        stack<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>currentNestedInteger<span class=\"token punctuation\">.</span>getList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>pointer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        nextVal <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>pointer<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>pointer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> nextVal\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>pointer <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>flattenList<span class=\"token punctuation\">)</span>\n        \n\n            \n\n<span class=\"token comment\"># Your NestedIterator object will be instantiated and called as such:</span>\n<span class=\"token comment\"># i, v = NestedIterator(nestedList), []</span>\n<span class=\"token comment\"># while i.hasNext(): v.append(i.next())</span></code></pre></div>\n<p>nestedList를 순회하면서, nestedInteger가 integer인지 list인지에 따라 DFS를 수행하거나 flattenList에 넣어주면 된다.</p>","excerpt":"Intuition  자료형이 주어지고 NestedInteger의 List가 들어올 때, 이를 1차원 vector로 flatten한 배열을 만들어주는  클래스를 구현하는 문제이다. 링크 NestedInteger 는 아래와 인터페이스만 제공된다. 구현해야할 NestedIterator의 함수는 다음과 같다. Approach init 함수에서 nestedList를 이용하여 를 만들어주고, next index를 가리키는 를 구현하는 방법으로 생각해보았다. 그러면 next에서는 pointer의 값을 리턴하고, hasNext는 pointer의 범위를 확인하면 될 것이다. flattenList를 만들어주는 과정은 를 이용하였다. 이 들어온다면 으로 만들어줘야 하므로 배열인 경우에는 더 깊이 들어가고, 숫자인 경우에는 flattenList에 추가해주면 된다. 주의할 점으로는 stack을 이용한 DFS의 경우, 역순으로 탐색하게 되므로 reverse를 해주어 스택에 넣어주면 될 것이다. Comple…","frontmatter":{"date":"September 19, 2023","title":"(Alg) LeetCode Top Interview 150 - 341. Flatten Nested List Iterator","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-341/"}},"next":{"id":"197d0970-745b-5468-a9c2-1ef755c1599d","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>0,1,2 로 구성된 정수형 배열을 오름차순으로 정렬하는 문제이다. <a href=\"https://leetcode.com/problems/sort-colors/\">링크</a></p>\n<p>문제에서는 라이브러리를 사용하지 않고, O(1)의 공간 복잡도로 문제를 해결하는 것을 제안하고 있다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<ul>\n<li>\n<p>sol1</p>\n<p>0,1,2의 숫자를 세고 이후에 nums 배열에 값을 대입하는 방법을 생각해보았다.</p>\n</li>\n<li>\n<p>sol2</p>\n<p>sol1로 제출하고 속도가 느려 다른 풀이를 봤는데, <code class=\"language-text\">Dutch Flag Algorithm(DFA)</code>에 대한 언급이 많아 해당 알고리즘을 찾아보았다. <a href=\"https://medium.com/quick-code/dutch-flag-algorithm-3669af2b14fd\">출처</a></p>\n<p>DFA는 left, right, pointer(네이밍은 조금씩 다를 수 있으나, 의미는 유사하다) 3개의 포인터를 갖고 배열을 탐색한다.</p>\n<ul>\n<li>left : 가장 앞에 있어야 하는 값(여기서는 0)이 들어올 위치를 가리키는 포인터</li>\n<li>right : 가장 뒤에 있어야 하는 값(여기서는 2)가 들어올 위치를 가리키는 포인터</li>\n<li>pointer : 현재 위치를 가리키는 포인터</li>\n</ul>\n<p>0 ~ left, right ~ n-1의 구간은 각각 0,2로 확정되는 구간으로 만들고, left~right 사이를 순회하는 pointer를 두어 범위를 줄여나가는 것이 이 알고리즘의 핵심이다.</p>\n<p>배열의 pointer 위치를 보면서…</p>\n<ul>\n<li>2인 경우: right와 pointer를 swap 한다(보낼 수 있는 가장 뒤로 2를 보낸다). 이후 바뀐 pointer의 값을 다시 봐야할 것이므로 pointer는 옮기지 않는다. right는 앞으로 한칸 당겨 다음 2의 위치를 가리키도록 한다.</li>\n<li>1인 경우: pointer를 다음 칸으로 옮긴다.</li>\n<li>0인 경우: left와 pointer를 swap 한다(보낼 수 있는 가장 앞으로 0을 보낸다). left를 뒤로 당겨 다음 0의 위치를 가리키도록 한다. 여기서는 strt의 값이 <strong>무조건 0 아님 1이므로</strong> pointer를 다음칸으로 옮겨도 된다. <u>1의 위치는 0과 2를 양끝으로 보내기만 하면 알아서 가운데에 자리잡기 때문</u>이다.</li>\n</ul>\n<p>이를 <strong>pointer가 end보다 크지 않을 동안</strong> (pointer와 end가 겹치면 0<del>1</del>2 순으로 정렬이 완료되어 더 이상 보지 않아도 됨)탐색하면 된다.</p>\n</li>\n</ul>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity</p>\n<ul>\n<li>\n<p>sol1 : O(n), 하지만 sol2에 비하여 느리다 (심지어 python list sort 함수보다 느렸다) 배열을 두번 순회하므로 2*n의 시간이 걸리기 때문일 것이다.</p>\n</li>\n<li>\n<p>sol2 : O(n)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Space complexity: O(1)</p>\n<p>두 방법 모두 공간 복잡도는 배열의 크기와 상관없이 일정할 것이다.</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<p>첫번째 방법의 코드이다. 배열을 두번 순회하며 원소들의 갯수를 세어 값을 정렬한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortColors</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        배열을 순회하며 0,1,2의 갯수를 센 이후,\n        배열을 다시 순회하며 값을 넣어줌\n        \"\"\"</span>\n        cnt0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                cnt0 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cnt2 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        cnt1 <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>cnt0<span class=\"token operator\">-</span>cnt2\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> cnt0 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                cnt0 <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> cnt1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                cnt1 <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n                cnt2 <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>값은 단 3개로 정해져있으므로, <code class=\"language-text\">elif num == 2</code>가 아닌 <code class=\"language-text\">else</code>로 하니까 속도가 좀 더 빨라지긴 했다.</p>\n<p>두번째 코드는 <code class=\"language-text\">Dutch National Flag Algorithm</code>을 적용한 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sortColors</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Dutch National Flag Algorithm\n        pointer 위치에 있는 값을 확인하며,,,\n        2를 만나면 현재까지의 맨 뒤(right)로 스왑하여 보낸다 &amp; --left\n        1을 만나면 ++pointer\n        0을 만나면 현재까지의 맨 앞과 스왑하여 보낸다 &amp; ++strt &amp; ++pointer\n        \"\"\"</span>\n        left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> pointer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> pointer <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># swap pointer ~ right</span>\n                nums<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span>\n                <span class=\"token comment\"># move right to forward</span>\n                right <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> nums<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># move pointer</span>\n                pointer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 0</span>\n                <span class=\"token comment\"># swap pointer ~ left</span>\n                nums<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>pointer<span class=\"token punctuation\">]</span>\n                <span class=\"token comment\"># move pointer</span>\n                pointer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token comment\"># move left to backward</span>\n                left <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>맨 뒤로 보내는 경우에는 right에 어떤 값이 있는지 모르므로, swap 이후에 pointer를 업데이트 하지 않아야 한다. 반대로 맨 앞으로 보내야 하는 경우에는 left에 무조건 0또는 1만 존재하므로 swap하고 pointer를 뒤로 업데이트 한다!</p>","frontmatter":{"date":"September 18, 2023","title":"(Alg) LeetCode Top Interview 150 - 75. sort colors (Dutch National Flag Algorithm)","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-75/"}},"prev":{"id":"98e25779-a901-5a68-a9ee-b8bf1f851a34","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>트리에서 <code class=\"language-text\">inorder traverse</code>를 수행한 리스트를 리턴하는 문제이다. <a href=\"https://leetcode.com/problems/binary-tree-inorder-traversal/\">링크</a></p>\n<p><a href=\"https://choieastsea.github.io/Alg-LC-230/\">230번 문제</a>의 기반이 된다고 볼 수 있는 inorder 순회는 <code class=\"language-text\">[트리의 왼쪽 서브트리 탐색] - [노드 탐색] - [트리의 오른쪽 서브트리 탐색]</code> 이 재귀적으로 이루어지는 순회이다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>sol1) 직관적으로 tree의 순회 문제들은 재귀적으로 구현해볼 수 있다.</p>\n<p>sol2) 반복문으로 inorder search를 구현할 수 있다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n)</p>\n<p>탐색의 경우 트리의 모든 노드를 탐색하는 것이므로 트리 사이즈에 비례한 시간이 걸린다.</p>\n</li>\n<li>\n<p>Space complexity: O(n)</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># left subtree - root - right subtree</span>\n        visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                inorder<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            visit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                inorder<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> root <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            inorder<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> visit</code></pre></div>\n<p>inorderTraversal 함수는 List를 반환하므로, 내부에 <code class=\"language-text\">inorder</code> 재귀함수를 만들어서 중위순회를 진행하였다. 방문할 때에는 visit 리스트에 추가하도록 구현하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># traverse left subtree - root - right subtree</span>\n        <span class=\"token comment\"># 왼쪽에서부터 사선을 긋는다고 생각 -> 오른쪽 자식 있다면 스택에 넣는다</span>\n        visit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        current <span class=\"token operator\">=</span> root\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">elif</span> stack<span class=\"token punctuation\">:</span>\n                current <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># visit current</span>\n                visit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        \n        <span class=\"token keyword\">return</span> visit</code></pre></div>\n<p>두번째 방법은 while 문과 stack을 이용하여 구현하였다.</p>\n<p>이진트리가 주어졌을 때, <strong>왼쪽 아래 사선 방향으로 가면서 오른쪽 아래로 갈 수 있다면 가도록</strong> 반복문을 작성하는 것이 핵심이다. 이를 위하여 stack을 두고, stack에 왼쪽을 넣어가면서 더 이상 왼쪽이 없다면 pop해가면서 오른쪽을 넣고, 오른쪽이 없다면 다시 pop하면서 위의 노드를 보도록 한다.</p>","frontmatter":{"date":"September 21, 2023","title":"(Alg) LeetCode Top Interview 150 - 94. Binary Tree Inorder Traversal","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-94/"}},"site":{"siteMetadata":{"siteUrl":"https://choieastsea.github.io","comments":{"utterances":{"repo":"choieastsea/choieastsea.github.io"}}}}},"pageContext":{"slug":"/Alg-LC-341/","nextSlug":"/Alg-LC-75/","prevSlug":"/Alg-LC-94/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}