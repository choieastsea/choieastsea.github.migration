{"componentChunkName":"component---src-templates-blog-template-js","path":"/Alg-LC-153/","result":{"data":{"cur":{"id":"5ebc27c9-9855-510a-afde-bb80c4c8b382","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>정렬된 배열이 임의의 인덱스에서 rotate되어 있을 때, 최솟값의 위치를 찾는 문제이다. <a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\">링크</a></p>\n<p>이는 33번과 매우 유사하지만, 좀 더 간단하다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>33번과 유사하게, 배열의 범위를 보며 정렬된 구간을 줄여나가면 된다.</p>\n<p>원소의 값이 모두 다르므로, 정렬된 구간이라면 첫번째 인덱스가 마지막 인덱스보다 작음을 이용할 수 있다.</p>\n<p>나는 <code class=\"language-text\">current_min</code>이라는 tuple을 선언하여 (인덱스, 현재까지의 최솟값)을 저장하여 비교하도록 하였다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(log(n))</p>\n</li>\n<li>\n<p>Space complexity: O(1)</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        rotated array에서 min 값의 위치를 찾자! -> BS\n        \"\"\"</span>\n        strt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        end <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        current_min <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>strt<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (idx, value)</span>\n        <span class=\"token keyword\">while</span> strt <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># print(f'{strt}~{end}, current_min:{current_min}')</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>strt <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_min<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                current_min <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 순수 증가 구간</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_min<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> current_min<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">elif</span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 앞부분 증가, 뒷부분 rotate</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_min<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    current_min <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>strt<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 뒷부분도 봐야함</span>\n                strt <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 뒷부분 증가, 앞부분 rotate</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_min<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    current_min <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># 앞부분도 봐야함</span>\n                end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> current_min<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>mid값을 우선적으로 current_min과 비교하고, 구간을 줄일 때에는 mid+1, mid-1을 넣어주어 범위를 log(n)으로 줄여나갈 수 있다.</p>","excerpt":"Intuition 정렬된 배열이 임의의 인덱스에서 rotate되어 있을 때, 최솟값의 위치를 찾는 문제이다. 링크 이는 33번과 매우 유사하지만, 좀 더 간단하다. Approach 33번과 유사하게, 배열의 범위를 보며 정렬된 구간을 줄여나가면 된다. 원소의 값이 모두 다르므로, 정렬된 구간이라면 첫번째 인덱스가 마지막 인덱스보다 작음을 이용할 수 있다. 나는 이라는 tuple을 선언하여 (인덱스, 현재까지의 최솟값)을 저장하여 비교하도록 하였다. Complexity Time complexity: O(log(n)) Space complexity: O(1) Code mid값을 우선적으로 current_min과 비교하고, 구간을 줄일 때에는 mid+1, mid-1을 넣어주어 범위를 log(n)으로 줄여나갈 수 있다.","frontmatter":{"date":"September 03, 2023","title":"(Alg) LeetCode Top Interview 150 - 153. Find Minimum in Rotated Sorted Array","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-153/"}},"next":{"id":"861f34c0-c233-5990-af4c-6d52e87d78e5","html":"<ol start=\"383\">\n<li></li>\n</ol>\n<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>ransomNote에 사용된 문자들이 모두 magazine에 포함되는지를 판단하는 문제이다. <a href=\"leetcode.com/problems/contains-duplicate-ii/\">링크</a></p>\n<p>예를 들어, ‘aa’는 ‘aba’에 포함되며, ‘ab’에 포함되지는 않는다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>python dict를 이용하여 갯수를 기록할 수 있지만, 간단하게 <code class=\"language-text\">collections.Counter</code>를 이용하여 구현할 수 있다. <a href=\"https://docs.python.org/ko/3/library/collections.html#counter-objects\">파이썬 문서 링크</a></p>\n<p>iterable한 것들의 갯수를 셀 때 Counter 클래스를 이용하는 장점이 몇가지가 있다.</p>\n<ol>\n<li>중복된 것들의 갯수를 알아서 세준다. <code class=\"language-text\">Counter(object)</code>만 해주면 된다.</li>\n<li>만약 없다면 0을 반환한다. (dict의 경우 in 연산이 아닌 index접근의 경우 KeyError가 발생)</li>\n<li><code class=\"language-text\">most_common</code>과 같이 최빈값을 뽑을때 간단하게 사용할 수 있다.</li>\n<li><strong>연산이 가능하다.</strong> 이를 통하여 차집합 연산을 수행할 수 있다.</li>\n</ol>\n<p>이 문제는 4번째의 특성을 이용하여 아주 간단하게 해결할 수 있다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n)</p>\n<p>Counter 인스턴스를 초기화하는데 O(n)의 시간이 걸린다.</p>\n</li>\n<li>\n<p>Space complexity: O(n)</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">canConstruct</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ransomNote<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> magazine<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        rCounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>ransomNote<span class=\"token punctuation\">)</span>\n        mCounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>magazine<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rCounter <span class=\"token operator\">-</span> mCounter<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span></code></pre></div>\n<p>rCounter에서 mCounter를 빼준 것이 0이면 모든 문자열이 포함된다는 것이다. Counter의 연산에서 minus는 없는 것은 따로 연산을 수행하지 않기 때문이다.</p>\n<hr>\n<ol start=\"242\">\n<li></li>\n</ol>\n<h1 id=\"intuition-1\" style=\"position:relative;\"><a href=\"#intuition-1\" aria-label=\"intuition 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>위와 비슷하게 s를 재배열하여 t를 표현할 수 있는지 여부를 반환하는 문제이다. <a href=\"https://leetcode.com/problems/valid-anagram/\">링크</a></p>\n<p>단순하게 s를 재배열하는 것이므로 t와 s의 길이는 같을 것이다.</p>\n<h1 id=\"approach-1\" style=\"position:relative;\"><a href=\"#approach-1\" aria-label=\"approach 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>Counter를 이용하여 두 갯수가 같은지만 비교하면 된다. 순서는 의미 없기 때문이다.</p>\n<h1 id=\"complexity-1\" style=\"position:relative;\"><a href=\"#complexity-1\" aria-label=\"complexity 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n)</p>\n</li>\n<li>\n<p>Space complexity: O(n)</p>\n</li>\n</ul>\n<h1 id=\"code-1\" style=\"position:relative;\"><a href=\"#code-1\" aria-label=\"code 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isAnagram</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        sCounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        tCounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> sCounter <span class=\"token operator\">==</span> tCounter</code></pre></div>\n<p>갯수를 셀때에는 dictionary보다 Counter가 더 빠를 것이다.!</p>\n<p>Hash Table 문제를 풀 때 도구로서 알고 있으면 좋다.</p>","frontmatter":{"date":"August 30, 2023","title":"(Alg) LeetCode Top Interview 150 - 383. Ransom Note, 242. Valid Anagram","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-383&242/"}},"prev":{"id":"2284ba99-84fe-5dbd-82f6-3e2e3a4eb03b","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>정렬된 배열이 임의의 인덱스에서 rotate되어 있을 때, target의 위치를 찾는 문제이다. <a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array/\">링크</a></p>\n<p>target이 없다면 -1을 리턴한다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>정렬된 배열이 [1,2,3,4,5]라고 했을 때, rotate된 배열의 예시는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 2 3 4 5\n-> 3 4 5 1 2\n-> 2 3 4 5 1\n-> 4 5 1 2 3</code></pre></div>\n<p>문제에서는 <code class=\"language-text\">log(n)</code>에 해결할 것을 주문하였으므로, 선형탐색이 아닌 다른 방법을 선택해야한다.</p>\n<p>배열은 rotate된 위치를 중심으로 왼쪽 오른쪽 subarray가 모두 정렬된 상태임을 이용해볼 수 있다. 즉, 정렬된 구간에서는 binary search를 이용할 수 있으니 정렬된 구간을 찾아가는 식으로 문제를 해결해 볼 수 있을 것이다.</p>\n<ul>\n<li>배열을 두 부분으로 나눈다.</li>\n<li>왼쪽 혹은 오른쪽 부분은 항상 정렬되어 있을 것이다. (rotate는 한 곳에서 일어나므로)</li>\n<li>정렬된 부분에서는 <code class=\"language-text\">Binary Search</code>를 수행한다.</li>\n<li>정렬되지 않은 부분은 다시 정렬된 부분을 찾기 위해 탐색 범위를 좁혀나간다.</li>\n</ul>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(log(n))</p>\n</li>\n<li>\n<p>Space complexity: O(1)</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        strt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        end <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> strt <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># print(f'while : nums[{strt}]({nums[strt]})~nums[{end}]({nums[end]})')</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>strt <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> mid\n\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 여기는 순수 증가하는 구간임 -> BS</span>\n                <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>bs<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> strt<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">elif</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>strt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 뒷구간에서 rotate 발생 (앞부분 sort -> 앞부분 bs)</span>\n                result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bs<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> strt<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># rotate된 뒷구간에서 다시 시작</span>\n                    strt <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> result\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># 앞구간에서 rotate 발생 (뒷부분 sort)</span>\n                result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bs<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># rotate된 앞구간에서 다시 시작</span>\n                    end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">bs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 정렬된 구간에서 target을 찾는 함수. 없다면 -1 리턴</span>\n        <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span>\n                right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span>\n                left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> mid\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>\n<p>순수 정렬된 구간에서 사용하기 위하여 bs 함수를 만들어주었고, 범위를 줄여나가며 정렬된 구간을 찾도록 하였다.</p>\n<p>조건에 각 원소는 다 다르므로, 정렬되어 있다면 구간의 양끝값만 비교하여 <strong>맨 앞이 맨 뒤보다 작기만 하면 정렬이 된 것으로 간주할 수 있다</strong>!</p>","frontmatter":{"date":"September 03, 2023","title":"(Alg) LeetCode Top Interview 150 - 33. Search in Rotated Sorted Array","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-33/"}},"site":{"siteMetadata":{"siteUrl":"https://choieastsea.github.io","comments":{"utterances":{"repo":"choieastsea/choieastsea.github.io"}}}}},"pageContext":{"slug":"/Alg-LC-153/","nextSlug":"/Alg-LC-383&242/","prevSlug":"/Alg-LC-33/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}