{"componentChunkName":"component---src-templates-blog-template-js","path":"/Alg-LC-530/","result":{"data":{"cur":{"id":"1b983a40-3c79-583e-87f1-9093beae7e0b","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>Binary Search Tree(BST)에서 두 노드의 차이가 최소가 되도록 하는 값을 찾는 문제이다. <a href=\"https://leetcode.com/problems/minimum-absolute-difference-in-bst/\">링크</a></p>\n<p>두 노드간 차이는 양수이며, 자식-부모관계가 아니여도 된다. 그리고 각각의 노드는 모두 다른 값을 갖는다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>기본적으로 Brute Force로 생각해보면, 트리를 순회하면서 한 노드를 고르고 그것과 차이가 가장 작은 노드를 찾으면 될 것이다. 하지만, 이는 시간이 오래걸리므로, <strong>재귀적으로 문제를 해결</strong>해보자.</p>\n<p>BST이므로 특징을 떠올려볼 수 있는데, <u>한 노드를 root로 하는 subtree에서 root와의 최소 차이를 갖는 값은 둘 중 하나</u>이다.</p>\n<ol>\n<li>오른쪽 자식의 맨 왼쪽 leaf(오른쪽 자식을 root로 하는 subtree에서 가장 작은 값)</li>\n<li>왼쪽 자식의 맨 오른쪽 leaf(왼쪽 자식을 root로 하는 subtree에서 가장 큰 값)</li>\n</ol>\n<p>그리고, <strong>차이가 가장 적은 두 노드를 찾을 때, 두 노드의 관계는 조상~손자의 관계일 것</strong>이다. 왜냐하면 sibling이거나, 조상-손자 관계가 아닐 경우, 항상 그 둘보다 차이가 작은 노드의 조합이 존재한다! 이를 이용하여 재귀적으로 문제를 바라볼 수 있다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(nlog(n))</p>\n<p>각 노드에서 차이의 최솟값을 구하기 위해 해당 서브트리의 높이만큼 탐색하고, 모든 노드를 탐색하므로 nlog(n)정도의 시간이 걸린다고 볼 수 있다.</p>\n</li>\n<li>\n<p>Space complexity: O(1)</p>\n<p>트리의 크기가 증가한다해서 추가적인 메모리가 필요하진 않을 것이다.</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getMinimumDifference</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        가장 적은 두 노드간의 차이를 리턴\n        : 어떠한 서브트리에서, min(본인 - 본인 왼쪽 서브 트리중 가장 큰 값, 본인 - 본인 오른쪽 서브 트리중 가장 작은 값)\n        오른쪽(혹은 왼쪽) 자식에서의 최솟값과 본인 노드에서 얻을 수 있는 최솟값을 비교하여 본인의 최솟값으로 정함\n        \"\"\"</span>\n        node <span class=\"token operator\">=</span> root\n        leftMin <span class=\"token operator\">=</span> rightMin <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">5</span>\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 오른쪽 자식 있다면</span>\n            rightMin <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getMinimumDifference<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>getSmallest<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 왼쪽 자식 있다면</span>\n            leftMin <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>getMinimumDifference<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>getLargest<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>rightMin<span class=\"token punctuation\">,</span> leftMin<span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getLargest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span>Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        해당 노드를 루트로 하는 서브트리에서 가장 큰 값을 리턴\n        \"\"\"</span>\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getSmallest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span>Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        해당 노드를 루트로 하는 서브트리에서 가장 작은 값을 리턴\n        \"\"\"</span>\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val</code></pre></div>\n<p><code class=\"language-text\">getMinimumDifference</code>는 어떤 노드를 root로 하는 subtree에서 가장 작은 노드 간의 차이를 리턴하는 함수이다.</p>\n<p>이게 어떻게 최소 차이를 구하냐면,</p>\n<ul>\n<li><strong>자식을 root로 하는 subtree에서의 최소 차이를 구한다</strong> (<code class=\"language-text\">getMinimumDifference(node.right/left)</code>)</li>\n<li>본인 노드와의 최소 차이를 구한다. 이는 위의 Approach에서 언급한 명확한 방법이 있다. (왼쪽자식의 오른쪽 손자, 오른쪽 자식의 왼쪽 손자)</li>\n<li>두 값 중 더 작은 것이 최소 차이이다.</li>\n</ul>\n<p>getMinimumDifference(node.right)를 이용하는게 말이 안되는 것 같지만, 이렇게 <code class=\"language-text\">함수가 역할을 수행한다고 가정하고, 귀납적으로 함수를 구성하는</code> 재귀함수를 구성해볼 수 있다.</p>","excerpt":"Intuition Binary Search Tree(BST)에서 두 노드의 차이가 최소가 되도록 하는 값을 찾는 문제이다. 링크 두 노드간 차이는 양수이며, 자식-부모관계가 아니여도 된다. 그리고 각각의 노드는 모두 다른 값을 갖는다. Approach 기본적으로 Brute Force로 생각해보면, 트리를 순회하면서 한 노드를 고르고 그것과 차이가 가장 작은 노드를 찾으면 될 것이다. 하지만, 이는 시간이 오래걸리므로, 재귀적으로 문제를 해결해보자. BST이므로 특징을 떠올려볼 수 있는데, 한 노드를 root로 하는 subtree에서 root와의 최소 차이를 갖는 값은 둘 중 하나이다. 오른쪽 자식의 맨 왼쪽 leaf(오른쪽 자식을 root로 하는 subtree에서 가장 작은 값) 왼쪽 자식의 맨 오른쪽 leaf(왼쪽 자식을 root로 하는 subtree에서 가장 큰 값) 그리고, 차이가 가장 적은 두 노드를 찾을 때, 두 노드의 관계는 조상~손자의 관계일 것이다. 왜냐하면 sibl…","frontmatter":{"date":"September 07, 2023","title":"(Alg) LeetCode Top Interview 150 - 530. Minimum Absolute Difference in BST","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-530/"}},"next":{"id":"77f7754e-455a-5da3-8f07-a2054063c837","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>Binary Search Tree(BST)에서 k번째로 작은 원소를 찾는 문제이다. <a href=\"https://leetcode.com/problems/kth-smallest-element-in-a-bst/\">링크</a></p>\n<p>각각의 노드는 다른 값을 갖고, 가장 작은 원소는 1번째로 작다고 한다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>BST를 직접 그려보고, 정렬된 값을 추출하는 과정을 생각해보면 몇가지 특징이 존재한다.</p>\n<p>한 노드를 루트로 하는 서브트리에서 가장 큰 값은, 가장 오른쪽에 있고 가장 작은 값은 왼쪽에 있다.</p>\n<p>왼쪽 자식의 어떠한 값도 자기자신보다는 작고, 오른쪽 자식의 어떠한 값도 자기 자신보다는 크다!</p>\n<p>따라서, <code class=\"language-text\">왼쪽 서브트리 -> 부모 -> 오른쪽 서브트리</code>의 순서로 순회하는 <code class=\"language-text\">inorder</code> traverse를 수행하면 BST는 정렬된 순서로 나오게 될 것이다!</p>\n<p>이는 재귀적으로 해결하거나, stack을 이용한 while문으로도 해결할 수 있으나 후자의 방법이 더 좋다. (단순히 출력하는 거라면 상관없지만, 갯수를 세서 중간에 리턴해야하는데, 재귀는 이것이 어렵다)</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<ul>\n<li>\n<p>Time complexity: O(n)</p>\n<p>각 노드를 한번씩 탐색하므로 O(n)정도 걸릴 것이다.</p>\n</li>\n<li>\n<p>Space complexity: O(n)</p>\n<p>stack에 노드를 넣고 빼므로 트리가 커질수록 스택의 크기가 커질 것이다.</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<p>첫번째 코드는 재귀를 이용하여 inorder를 구현하는 방법이다.</p>\n<p>sortedList에서 가장 작은 값부터 append하면서, 크기가 k가 되면 재귀를 종료하는 형식이다. 이는 함수의 인자로 sortedList를 갖고 다녀야 한다는 점에서 공간복잡도가 높다고 볼 수 있다. 그리고, 재귀함수는 일반적으로 반복문보다는 느리고 stack overflow가 날 가능성이 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">kthSmallest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        왼쪽 서브트리 -> 부모 -> 오른쪽 서브트리로 순회\n        \"\"\"</span>\n        sortedList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>traverse<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sortedList<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>sortedList<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sortedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        cnt==k가 될때까지 L-N-R 순회\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>traverse<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sortedList<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print(f'{node.val} visited!')</span>\n        sortedList<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sortedList<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> \n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>traverse<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> sortedList<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>두번째 코드는 while문과 stack을 이용하여 inorder를 구현하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for a binary tree node.</span>\n<span class=\"token comment\"># class TreeNode:</span>\n<span class=\"token comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"token comment\">#         self.val = val</span>\n<span class=\"token comment\">#         self.left = left</span>\n<span class=\"token comment\">#         self.right = right</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">kthSmallest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        왼쪽 서브트리 -> 부모 -> 오른쪽 서브트리로 순회 -> stack &amp; while 문 이용\n        왼쪽으로 가면서 stack에 넣기\n        \"\"\"</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        current <span class=\"token operator\">=</span> root\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 왼쪽 있다면 넣고</span>\n            <span class=\"token keyword\">if</span> current <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left\n            <span class=\"token comment\"># 왼쪽 없다면 그거 오른쪽 탐색하면서 cnt += 1</span>\n            <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                current <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># print(current.val)</span>\n                cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">==</span> k<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">.</span>val\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n</code></pre></div>\n<p>한 while문에서, current의 값을 기준으로 stack의 값을 처리하는데, 다음과 같다.</p>\n<ul>\n<li>current가 None이 아니라면, <strong>current를 stack에 넣고 왼쪽 자식을 current로 업데이트</strong> 한다. (자식 없으면 current None이 될 것)</li>\n<li>current가 None이라면(왼쪽 자식이 더 이상 없다면), <strong>stack에서 값을 하나 빼서 탐색</strong>한다. 이는 현재 가능한 가장 왼쪽 leaf일 것이다. 그리고, 해당 <strong>leaf의 부모의 오른쪽 자식들이 있다면 current로 업데이트</strong> 한다.</li>\n</ul>\n<p>트리를 \\ 방향으로 순회하기 위하여 하나의 stack을 이용할 수 있는데, current 값을 기준으로 왼쪽이나 오른쪽을 추가하고, 탐색하는 과정이 약간 어려울 수 있으나 알고 있도록 하자.</p>","frontmatter":{"date":"September 07, 2023","title":"(Alg) LeetCode Top Interview 150 - 230. Kth Smallest Element in a BST","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-230/"}},"prev":{"id":"8ab6fe9a-0b1a-5ff8-b900-b8bbe721f0d9","html":"<h1 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h1>\n<p>저번에 구현한 <code class=\"language-text\">Trie</code> 자료구조를 이용하여 search함수를 구현하는 문제이다. <a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\">링크</a></p>\n<p>search함수는 208번 문제와 다르게 ’.’가 포함될 수 있는데, 이는 모든 문자가 가능한 경우를 의미한다. 예를 들어, ‘dad’, ‘pad’, ‘mad’가 들어있는 트라이에서 <code class=\"language-text\">search('.ad')</code>는 3 단어를 모두 리턴할 것이다.</p>\n<h1 id=\"approach\" style=\"position:relative;\"><a href=\"#approach\" aria-label=\"approach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach</h1>\n<p>트라이에 대한 구현은 <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">208번</a>에서 했으니, 이번에는 search함수에서 ’.’를 처리하는 부분에 중점 두어 해결해보자.</p>\n<p>여러 방법이 존재하겠지만, ’.’의 경우에는 결국 해당 노드에서 가능한 모든 다음 노드로 각각 search를 수행해야 한다. 나는 <code class=\"language-text\">deque</code> 자료구조를 이용하여 search 함수를 구현하였다. trie를 탐색하면서, 입력 문자열을 하나씩 matching하다가 ’.’를 만나면, 특정 노드가 아닌 모든 노드로 뻗어나가야 한다. 나는 이를 BFS의 구조와 유사하다고 판단하여 탐색할 노드들을 queue에 넣고, depth별로(문자별로) 모든 큐의 노드들을 탐색하는 방법으로 구현하였다. 마지막까지 탐색했다면 <code class=\"language-text\">isEnd</code> 여부를 검사하고, 하나라도 가능한 경우가 있다면 True를 리턴한다.</p>\n<h1 id=\"complexity\" style=\"position:relative;\"><a href=\"#complexity\" aria-label=\"complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complexity</h1>\n<p>search함수의 시간복잡도는 아래와 같을 것이다.</p>\n<ul>\n<li>\n<p>Time complexity: O(size of trie)</p>\n<p>최악의 경우, ’…’와 같이 모든 트라이의 공간을 탐색할 수 있으므로 트라이의 크기만큼 걸릴 것이다.</p>\n</li>\n<li>\n<p>Space complexity: O(n)</p>\n<p>deque를 각 단계마다 비우긴 하지만, deque의 크기는 각 단계별 너비, 즉 문자열의 갯수에 비례한다.</p>\n</li>\n</ul>\n<h1 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WordDictionary</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'isEnd'</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addWord</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> ch <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> current<span class=\"token punctuation\">:</span>\n                current<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'isEnd'</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">}</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span>\n        current<span class=\"token punctuation\">[</span><span class=\"token string\">'isEnd'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        q <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># print(q, ch)</span>\n            <span class=\"token keyword\">if</span> ch <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    current <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> current<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 가능한 다음 노드들을 모두 탐색함</span>\n                        <span class=\"token keyword\">if</span> k <span class=\"token operator\">!=</span> <span class=\"token string\">'isEnd'</span><span class=\"token punctuation\">:</span>\n                            q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>     \n                <span class=\"token comment\"># 일반 문자라면, 해당 문자가 있는지 확인하고 넣어줌. 없는 것들은 무시</span>\n                <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    current <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> ch <span class=\"token keyword\">in</span> current<span class=\"token punctuation\">:</span>\n                        q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> el <span class=\"token keyword\">in</span> q<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 마지막 단계의 노드들이 deque에 존재할 것</span>\n            <span class=\"token keyword\">if</span> el<span class=\"token punctuation\">[</span><span class=\"token string\">'isEnd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n              \t<span class=\"token comment\"># 해당 단어가 존재함!</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n<span class=\"token comment\"># Your WordDictionary object will be instantiated and called as such:</span>\n<span class=\"token comment\"># obj = WordDictionary()</span>\n<span class=\"token comment\"># obj.addWord(word)</span>\n<span class=\"token comment\"># param_2 = obj.search(word)</span></code></pre></div>\n<p>처음에는 q에 head를 넣은 상태로 탐색을 시작한다.</p>\n<p>문자열을 한 문자씩 탐색하면서 해당 Node가 존재하는지를 판단하는데, ’.’를 만난다면, q를 비워주면서 해당 노드에서 가능한 모든 다음 노드들을 queue에 넣는다. 이전 노드는 앞에 있고, 넣을 노드는 뒤에 있어야하므로 <code class=\"language-text\">stack</code>보다는 <code class=\"language-text\">queue</code>가 적합하다고 볼 수 있다.</p>\n<p>다른 일반 문자라면, queue의 모든 노드에서 해당 문자의 노드를 갖는지 확인하고, 가능한 노드들만 다음 단계로 넘긴다.</p>\n<p>모든 word의 문자들을 탐색한 이후에는 여태까지 살아남은(가능한) 문자열들이 존재할 것이다. 여기에서 끝나야 하나의 문자열로 인정되므로, isEnd를 확인하며 하나라도 존재하면 True를 리턴하도록 한다.</p>","frontmatter":{"date":"September 11, 2023","title":"(Alg) LeetCode Top Interview 150 - 211. Design Add and Search Words Data Structure","categories":"Alg","author":"choieastsea","emoji":"🫠"},"fields":{"slug":"/Alg-LC-211/"}},"site":{"siteMetadata":{"siteUrl":"https://choieastsea.github.io","comments":{"utterances":{"repo":"choieastsea/choieastsea.github.io"}}}}},"pageContext":{"slug":"/Alg-LC-530/","nextSlug":"/Alg-LC-230/","prevSlug":"/Alg-LC-211/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}